import { S as Static } from './Index-7fdff9d2.js';
import { F as File } from './File-e96cd7d6.js';
import { B as Block } from './Button-bd009e9a.js';
import { B as BlockLabel } from './BlockLabel-5d99d786.js';
import './index-10ead756.js';
import './svelte/svelte.js';

/* home/runner/work/gradio/gradio/js/fileexplorer/shared/ArrowIcon.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent: SvelteComponent$4,
	append: append$1,
	attr: attr$3,
	detach: detach$4,
	init: init$4,
	insert: insert$4,
	noop: noop$3,
	safe_not_equal: safe_not_equal$4,
	set_style,
	svg_element
} = window.__gradio__svelte__internal;
function create_fragment$4(ctx) {
	let svg;
	let g;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			g = svg_element("g");
			path = svg_element("path");
			attr$3(path, "d", "M12.7,24.033C12.256,24.322 11.806,24.339 11.351,24.084C10.896,23.829 10.668,23.434 10.667,22.9L10.667,9.1C10.667,8.567 10.895,8.172 11.351,7.916C11.807,7.66 12.256,7.677 12.7,7.967L23.567,14.867C23.967,15.133 24.167,15.511 24.167,16C24.167,16.489 23.967,16.867 23.567,17.133L12.7,24.033Z");
			set_style(path, "fill", "currentColor");
			set_style(path, "fill-rule", "nonzero");
			attr$3(g, "transform", "matrix(1,0,0,1,-10.6667,-7.73588)");
			attr$3(svg, "width", "100%");
			attr$3(svg, "height", "100%");
			attr$3(svg, "viewBox", "0 0 14 17");
			attr$3(svg, "version", "1.1");
			set_style(svg, "fill-rule", "evenodd");
			set_style(svg, "clip-rule", "evenodd");
			set_style(svg, "stroke-linejoin", "round");
			set_style(svg, "stroke-miterlimit", "2");
		},
		m(target, anchor) {
			insert$4(target, svg, anchor);
			append$1(svg, g);
			append$1(g, path);
		},
		p: noop$3,
		i: noop$3,
		o: noop$3,
		d(detaching) {
			if (detaching) {
				detach$4(svg);
			}
		}
	};
}

class ArrowIcon extends SvelteComponent$4 {
	constructor(options) {
		super();
		init$4(this, options, null, create_fragment$4, safe_not_equal$4, {});
	}
}

const Checkbox_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/fileexplorer/shared/Checkbox.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent: SvelteComponent$3,
	attr: attr$2,
	detach: detach$3,
	element: element$2,
	init: init$3,
	insert: insert$3,
	listen: listen$1,
	noop: noop$2,
	run_all: run_all$1,
	safe_not_equal: safe_not_equal$3,
	toggle_class: toggle_class$1
} = window.__gradio__svelte__internal;
const { createEventDispatcher: createEventDispatcher$1 } = window.__gradio__svelte__internal;
function create_fragment$3(ctx) {
	let input;
	let mounted;
	let dispose;

	return {
		c() {
			input = element$2("input");
			attr$2(input, "type", "checkbox");
			input.disabled = /*disabled*/ ctx[1];
			attr$2(input, "class", "svelte-1j130g3");
			toggle_class$1(input, "disabled", /*disabled*/ ctx[1] && !/*value*/ ctx[0]);
		},
		m(target, anchor) {
			insert$3(target, input, anchor);
			input.checked = /*value*/ ctx[0];

			if (!mounted) {
				dispose = [
					listen$1(input, "change", /*input_change_handler*/ ctx[3]),
					listen$1(input, "input", /*input_handler*/ ctx[4])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*disabled*/ 2) {
				input.disabled = /*disabled*/ ctx[1];
			}

			if (dirty & /*value*/ 1) {
				input.checked = /*value*/ ctx[0];
			}

			if (dirty & /*disabled, value*/ 3) {
				toggle_class$1(input, "disabled", /*disabled*/ ctx[1] && !/*value*/ ctx[0]);
			}
		},
		i: noop$2,
		o: noop$2,
		d(detaching) {
			if (detaching) {
				detach$3(input);
			}

			mounted = false;
			run_all$1(dispose);
		}
	};
}

function instance$3($$self, $$props, $$invalidate) {
	let { value } = $$props;
	let { disabled } = $$props;
	const dispatch = createEventDispatcher$1();

	function input_change_handler() {
		value = this.checked;
		$$invalidate(0, value);
	}

	const input_handler = () => dispatch("change", !value);

	$$self.$$set = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('disabled' in $$props) $$invalidate(1, disabled = $$props.disabled);
	};

	return [value, disabled, dispatch, input_change_handler, input_handler];
}

class Checkbox extends SvelteComponent$3 {
	constructor(options) {
		super();
		init$3(this, options, instance$3, create_fragment$3, safe_not_equal$3, { value: 0, disabled: 1 });
	}
}

const FileIcon = ""+new URL('light-file-0e72c1e1.svg', import.meta.url).href+"";

const FolderIcon = ""+new URL('light-folder-4e9756c4.svg', import.meta.url).href+"";

const FileTree_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/fileexplorer/shared/FileTree.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent: SvelteComponent$2,
	append,
	attr: attr$1,
	bubble,
	check_outros: check_outros$1,
	create_component: create_component$2,
	destroy_component: destroy_component$2,
	destroy_each,
	detach: detach$2,
	element: element$1,
	ensure_array_like,
	group_outros: group_outros$1,
	init: init$2,
	insert: insert$2,
	listen,
	mount_component: mount_component$2,
	noop: noop$1,
	run_all,
	safe_not_equal: safe_not_equal$2,
	set_data,
	space: space$1,
	src_url_equal,
	stop_propagation,
	text,
	toggle_class,
	transition_in: transition_in$2,
	transition_out: transition_out$2
} = window.__gradio__svelte__internal;
const { createEventDispatcher } = window.__gradio__svelte__internal;
function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[21] = list[i].type;
	child_ctx[22] = list[i].name;
	child_ctx[23] = list[i].valid;
	child_ctx[25] = i;
	return child_ctx;
}

// (90:4) {:else}
function create_else_block(ctx) {
	let span;
	let img;
	let img_src_value;

	return {
		c() {
			span = element$1("span");
			img = element$1("img");
			if (!src_url_equal(img.src, img_src_value = /*name*/ ctx[22] === "." ? FolderIcon : FileIcon)) attr$1(img, "src", img_src_value);
			attr$1(img, "alt", "file icon");
			attr$1(img, "class", "svelte-hyugph");
			attr$1(span, "class", "file-icon svelte-hyugph");
		},
		m(target, anchor) {
			insert$2(target, span, anchor);
			append(span, img);
		},
		p(ctx, dirty) {
			if (dirty & /*content*/ 64 && !src_url_equal(img.src, img_src_value = /*name*/ ctx[22] === "." ? FolderIcon : FileIcon)) {
				attr$1(img, "src", img_src_value);
			}
		},
		i: noop$1,
		o: noop$1,
		d(detaching) {
			if (detaching) {
				detach$2(span);
			}
		}
	};
}

// (76:4) {#if type === "folder"}
function create_if_block_1(ctx) {
	let span;
	let arrow;
	let current;
	let mounted;
	let dispose;
	arrow = new ArrowIcon({});

	function click_handler() {
		return /*click_handler*/ ctx[15](/*i*/ ctx[25]);
	}

	function keydown_handler(...args) {
		return /*keydown_handler*/ ctx[16](/*i*/ ctx[25], ...args);
	}

	return {
		c() {
			span = element$1("span");
			create_component$2(arrow.$$.fragment);
			attr$1(span, "class", "icon svelte-hyugph");
			attr$1(span, "role", "button");
			attr$1(span, "aria-label", "expand directory");
			attr$1(span, "tabindex", "0");
			toggle_class(span, "hidden", !/*opened_folders*/ ctx[7].includes(/*i*/ ctx[25]));
		},
		m(target, anchor) {
			insert$2(target, span, anchor);
			mount_component$2(arrow, span, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(span, "click", stop_propagation(click_handler)),
					listen(span, "keydown", keydown_handler)
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (!current || dirty & /*opened_folders*/ 128) {
				toggle_class(span, "hidden", !/*opened_folders*/ ctx[7].includes(/*i*/ ctx[25]));
			}
		},
		i(local) {
			if (current) return;
			transition_in$2(arrow.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out$2(arrow.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach$2(span);
			}

			destroy_component$2(arrow);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (97:3) {#if type === "folder" && opened_folders.includes(i)}
function create_if_block(ctx) {
	let filetree;
	let current;

	function func_1(...args) {
		return /*func_1*/ ctx[17](/*name*/ ctx[22], ...args);
	}

	function func_3(...args) {
		return /*func_3*/ ctx[18](/*name*/ ctx[22], ...args);
	}

	function func_5(...args) {
		return /*func_5*/ ctx[19](/*name*/ ctx[22], ...args);
	}

	filetree = new FileTree({
			props: {
				path: [.../*path*/ ctx[0], /*name*/ ctx[22]],
				selected_files: /*selected_files*/ ctx[1].filter(func_1).map(func_2),
				selected_folders: /*selected_folders*/ ctx[2].filter(func_3).map(func_4),
				is_selected_entirely: /*selected_folders*/ ctx[2].some(func_5),
				interactive: /*interactive*/ ctx[3],
				ls_fn: /*ls_fn*/ ctx[4],
				file_count: /*file_count*/ ctx[5],
				valid_for_selection: /*valid*/ ctx[23]
			}
		});

	filetree.$on("check", /*check_handler*/ ctx[20]);

	return {
		c() {
			create_component$2(filetree.$$.fragment);
		},
		m(target, anchor) {
			mount_component$2(filetree, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const filetree_changes = {};
			if (dirty & /*path, content*/ 65) filetree_changes.path = [.../*path*/ ctx[0], /*name*/ ctx[22]];
			if (dirty & /*selected_files, content*/ 66) filetree_changes.selected_files = /*selected_files*/ ctx[1].filter(func_1).map(func_2);
			if (dirty & /*selected_folders, content*/ 68) filetree_changes.selected_folders = /*selected_folders*/ ctx[2].filter(func_3).map(func_4);
			if (dirty & /*selected_folders, content*/ 68) filetree_changes.is_selected_entirely = /*selected_folders*/ ctx[2].some(func_5);
			if (dirty & /*interactive*/ 8) filetree_changes.interactive = /*interactive*/ ctx[3];
			if (dirty & /*ls_fn*/ 16) filetree_changes.ls_fn = /*ls_fn*/ ctx[4];
			if (dirty & /*file_count*/ 32) filetree_changes.file_count = /*file_count*/ ctx[5];
			if (dirty & /*content*/ 64) filetree_changes.valid_for_selection = /*valid*/ ctx[23];
			filetree.$set(filetree_changes);
		},
		i(local) {
			if (current) return;
			transition_in$2(filetree.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out$2(filetree.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component$2(filetree, detaching);
		}
	};
}

// (54:1) {#each content as { type, name, valid }
function create_each_block(ctx) {
	let li;
	let span;
	let checkbox;
	let t0;
	let current_block_type_index;
	let if_block0;
	let t1;
	let t2_value = /*name*/ ctx[22] + "";
	let t2;
	let t3;
	let show_if = /*type*/ ctx[21] === "folder" && /*opened_folders*/ ctx[7].includes(/*i*/ ctx[25]);
	let t4;
	let current;

	function func(...args) {
		return /*func*/ ctx[13](/*name*/ ctx[22], ...args);
	}

	function change_handler(...args) {
		return /*change_handler*/ ctx[14](/*name*/ ctx[22], /*type*/ ctx[21], /*i*/ ctx[25], ...args);
	}

	checkbox = new Checkbox({
			props: {
				disabled: !/*interactive*/ ctx[3] || /*type*/ ctx[21] === "folder" && /*file_count*/ ctx[5] === "single",
				value: (/*type*/ ctx[21] === "file"
				? /*selected_files*/ ctx[1]
				: /*selected_folders*/ ctx[2]).some(func)
			}
		});

	checkbox.$on("change", change_handler);
	const if_block_creators = [create_if_block_1, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*type*/ ctx[21] === "folder") return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	let if_block1 = show_if && create_if_block(ctx);

	return {
		c() {
			li = element$1("li");
			span = element$1("span");
			create_component$2(checkbox.$$.fragment);
			t0 = space$1();
			if_block0.c();
			t1 = space$1();
			t2 = text(t2_value);
			t3 = space$1();
			if (if_block1) if_block1.c();
			t4 = space$1();
			attr$1(span, "class", "wrap svelte-hyugph");
			attr$1(li, "class", "svelte-hyugph");
		},
		m(target, anchor) {
			insert$2(target, li, anchor);
			append(li, span);
			mount_component$2(checkbox, span, null);
			append(span, t0);
			if_blocks[current_block_type_index].m(span, null);
			append(span, t1);
			append(span, t2);
			append(li, t3);
			if (if_block1) if_block1.m(li, null);
			append(li, t4);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const checkbox_changes = {};
			if (dirty & /*interactive, content, file_count*/ 104) checkbox_changes.disabled = !/*interactive*/ ctx[3] || /*type*/ ctx[21] === "folder" && /*file_count*/ ctx[5] === "single";

			if (dirty & /*content, selected_files, selected_folders*/ 70) checkbox_changes.value = (/*type*/ ctx[21] === "file"
			? /*selected_files*/ ctx[1]
			: /*selected_folders*/ ctx[2]).some(func);

			checkbox.$set(checkbox_changes);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros$1();

				transition_out$2(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros$1();
				if_block0 = if_blocks[current_block_type_index];

				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				} else {
					if_block0.p(ctx, dirty);
				}

				transition_in$2(if_block0, 1);
				if_block0.m(span, t1);
			}

			if ((!current || dirty & /*content*/ 64) && t2_value !== (t2_value = /*name*/ ctx[22] + "")) set_data(t2, t2_value);
			if (dirty & /*content, opened_folders*/ 192) show_if = /*type*/ ctx[21] === "folder" && /*opened_folders*/ ctx[7].includes(/*i*/ ctx[25]);

			if (show_if) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*content, opened_folders*/ 192) {
						transition_in$2(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					transition_in$2(if_block1, 1);
					if_block1.m(li, t4);
				}
			} else if (if_block1) {
				group_outros$1();

				transition_out$2(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros$1();
			}
		},
		i(local) {
			if (current) return;
			transition_in$2(checkbox.$$.fragment, local);
			transition_in$2(if_block0);
			transition_in$2(if_block1);
			current = true;
		},
		o(local) {
			transition_out$2(checkbox.$$.fragment, local);
			transition_out$2(if_block0);
			transition_out$2(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach$2(li);
			}

			destroy_component$2(checkbox);
			if_blocks[current_block_type_index].d();
			if (if_block1) if_block1.d();
		}
	};
}

function create_fragment$2(ctx) {
	let ul;
	let current;
	let each_value = ensure_array_like(/*content*/ ctx[6]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out$2(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			ul = element$1("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr$1(ul, "class", "svelte-hyugph");
		},
		m(target, anchor) {
			insert$2(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(ul, null);
				}
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*path, content, selected_files, selected_folders, interactive, ls_fn, file_count, opened_folders, toggle_open_folder, dispatch, open_folder*/ 2047) {
				each_value = ensure_array_like(/*content*/ ctx[6]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in$2(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in$2(each_blocks[i], 1);
						each_blocks[i].m(ul, null);
					}
				}

				group_outros$1();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros$1();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in$2(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out$2(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach$2(ul);
			}

			destroy_each(each_blocks, detaching);
		}
	};
}

const func_2 = x => x.slice(1);
const func_4 = x => x.slice(1);

function instance$2($$self, $$props, $$invalidate) {
	let { path = [] } = $$props;
	let { selected_files = [] } = $$props;
	let { selected_folders = [] } = $$props;
	let { is_selected_entirely = false } = $$props;
	let { interactive } = $$props;
	let { ls_fn } = $$props;
	let { file_count = "multiple" } = $$props;
	let { valid_for_selection } = $$props;
	let content = [];
	let opened_folders = [];

	const toggle_open_folder = i => {
		if (opened_folders.includes(i)) {
			$$invalidate(7, opened_folders = opened_folders.filter(x => x !== i));
		} else {
			$$invalidate(7, opened_folders = [...opened_folders, i]);
		}
	};

	const open_folder = i => {
		if (!opened_folders.includes(i)) {
			$$invalidate(7, opened_folders = [...opened_folders, i]);
		}
	};

	(async () => {
		$$invalidate(6, content = await ls_fn(path));

		if (valid_for_selection) {
			$$invalidate(6, content = [{ name: ".", type: "file" }, ...content]);
		}

		$$invalidate(7, opened_folders = content.map((x, i) => x.type === "folder" && (is_selected_entirely || selected_files.some(y => y[0] === x.name))
		? i
		: null).filter(x => x !== null));
	})();

	const dispatch = createEventDispatcher();
	const func = (name, x) => x[0] === name && x.length === 1;

	const change_handler = (name, type, i, e) => {
		let checked = e.detail;
		dispatch("check", { path: [...path, name], checked, type });

		if (type === "folder" && checked) {
			open_folder(i);
		}
	};

	const click_handler = i => toggle_open_folder(i);

	const keydown_handler = (i, { key }) => {
		if (key === " " || key === "Enter") {
			toggle_open_folder(i);
		}
	};

	const func_1 = (name, x) => x[0] === name;
	const func_3 = (name, x) => x[0] === name;
	const func_5 = (name, x) => x[0] === name && x.length === 1;

	function check_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$props => {
		if ('path' in $$props) $$invalidate(0, path = $$props.path);
		if ('selected_files' in $$props) $$invalidate(1, selected_files = $$props.selected_files);
		if ('selected_folders' in $$props) $$invalidate(2, selected_folders = $$props.selected_folders);
		if ('is_selected_entirely' in $$props) $$invalidate(11, is_selected_entirely = $$props.is_selected_entirely);
		if ('interactive' in $$props) $$invalidate(3, interactive = $$props.interactive);
		if ('ls_fn' in $$props) $$invalidate(4, ls_fn = $$props.ls_fn);
		if ('file_count' in $$props) $$invalidate(5, file_count = $$props.file_count);
		if ('valid_for_selection' in $$props) $$invalidate(12, valid_for_selection = $$props.valid_for_selection);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*is_selected_entirely, content, path*/ 2113) {
			if (is_selected_entirely) {
				content.forEach(x => {
					dispatch("check", {
						path: [...path, x.name],
						checked: true,
						type: x.type
					});
				});
			}
		}
	};

	return [
		path,
		selected_files,
		selected_folders,
		interactive,
		ls_fn,
		file_count,
		content,
		opened_folders,
		toggle_open_folder,
		open_folder,
		dispatch,
		is_selected_entirely,
		valid_for_selection,
		func,
		change_handler,
		click_handler,
		keydown_handler,
		func_1,
		func_3,
		func_5,
		check_handler
	];
}

class FileTree extends SvelteComponent$2 {
	constructor(options) {
		super();

		init$2(this, options, instance$2, create_fragment$2, safe_not_equal$2, {
			path: 0,
			selected_files: 1,
			selected_folders: 2,
			is_selected_entirely: 11,
			interactive: 3,
			ls_fn: 4,
			file_count: 5,
			valid_for_selection: 12
		});
	}
}

const DirectoryExplorer_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/fileexplorer/shared/DirectoryExplorer.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent: SvelteComponent$1,
	attr,
	create_component: create_component$1,
	destroy_component: destroy_component$1,
	detach: detach$1,
	element,
	init: init$1,
	insert: insert$1,
	mount_component: mount_component$1,
	safe_not_equal: safe_not_equal$1,
	transition_in: transition_in$1,
	transition_out: transition_out$1
} = window.__gradio__svelte__internal;
function create_fragment$1(ctx) {
	let div;
	let filetree;
	let current;

	filetree = new FileTree({
			props: {
				path: [],
				selected_files: /*value*/ ctx[0],
				selected_folders: /*selected_folders*/ ctx[4],
				interactive: /*interactive*/ ctx[1],
				ls_fn: /*ls_fn*/ ctx[3],
				file_count: /*file_count*/ ctx[2],
				valid_for_selection: false
			}
		});

	filetree.$on("check", /*check_handler*/ ctx[8]);

	return {
		c() {
			div = element("div");
			create_component$1(filetree.$$.fragment);
			attr(div, "class", "file-wrap svelte-dicskc");
		},
		m(target, anchor) {
			insert$1(target, div, anchor);
			mount_component$1(filetree, div, null);
			current = true;
		},
		p(ctx, [dirty]) {
			const filetree_changes = {};
			if (dirty & /*value*/ 1) filetree_changes.selected_files = /*value*/ ctx[0];
			if (dirty & /*selected_folders*/ 16) filetree_changes.selected_folders = /*selected_folders*/ ctx[4];
			if (dirty & /*interactive*/ 2) filetree_changes.interactive = /*interactive*/ ctx[1];
			if (dirty & /*ls_fn*/ 8) filetree_changes.ls_fn = /*ls_fn*/ ctx[3];
			if (dirty & /*file_count*/ 4) filetree_changes.file_count = /*file_count*/ ctx[2];
			filetree.$set(filetree_changes);
		},
		i(local) {
			if (current) return;
			transition_in$1(filetree.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out$1(filetree.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach$1(div);
			}

			destroy_component$1(filetree);
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	let { interactive } = $$props;
	let { file_count = "multiple" } = $$props;
	let { value = [] } = $$props;
	let { ls_fn } = $$props;
	let selected_folders = [];

	const paths_equal = (path, path_2) => {
		return path.join("/") === path_2.join("/");
	};

	const path_in_set = (path, set) => {
		return set.some(x => paths_equal(x, path));
	};

	const path_inside = (path, path_2) => {
		return path.join("/").startsWith(path_2.join("/"));
	};

	const check_handler = e => {
		const { path, checked, type } = e.detail;

		if (checked) {
			if (file_count === "single") {
				$$invalidate(0, value = [path]);
			} else if (type === "folder") {
				if (!path_in_set(path, selected_folders)) {
					$$invalidate(4, selected_folders = [...selected_folders, path]);
				}
			} else {
				if (!path_in_set(path, value)) {
					$$invalidate(0, value = [...value, path]);
				}
			}
		} else {
			$$invalidate(4, selected_folders = selected_folders.filter(folder => !path_inside(path, folder))); // deselect all parent folders

			if (type === "folder") {
				$$invalidate(4, selected_folders = selected_folders.filter(folder => !path_inside(folder, path))); // deselect all children folders
				$$invalidate(0, value = value.filter(file => !path_inside(file, path))); // deselect all children files
			} else {
				$$invalidate(0, value = value.filter(x => !paths_equal(x, path)));
			}
		}
	};

	$$self.$$set = $$props => {
		if ('interactive' in $$props) $$invalidate(1, interactive = $$props.interactive);
		if ('file_count' in $$props) $$invalidate(2, file_count = $$props.file_count);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('ls_fn' in $$props) $$invalidate(3, ls_fn = $$props.ls_fn);
	};

	return [
		value,
		interactive,
		file_count,
		ls_fn,
		selected_folders,
		paths_equal,
		path_in_set,
		path_inside,
		check_handler
	];
}

class DirectoryExplorer extends SvelteComponent$1 {
	constructor(options) {
		super();

		init$1(this, options, instance$1, create_fragment$1, safe_not_equal$1, {
			interactive: 1,
			file_count: 2,
			value: 0,
			ls_fn: 3
		});
	}
}

/* home/runner/work/gradio/gradio/js/fileexplorer/Index.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent,
	add_flush_callback,
	assign,
	bind,
	binding_callbacks,
	check_outros,
	create_component,
	destroy_component,
	detach,
	empty,
	flush,
	get_spread_object,
	get_spread_update,
	group_outros,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} = window.__gradio__svelte__internal;
function create_key_block(ctx) {
	let directoryexplorer;
	let updating_value;
	let current;

	function directoryexplorer_value_binding(value) {
		/*directoryexplorer_value_binding*/ ctx[20](value);
	}

	let directoryexplorer_props = {
		file_count: /*file_count*/ ctx[7],
		interactive: /*interactive*/ ctx[14],
		ls_fn: /*server*/ ctx[13].ls
	};

	if (/*value*/ ctx[0] !== void 0) {
		directoryexplorer_props.value = /*value*/ ctx[0];
	}

	directoryexplorer = new DirectoryExplorer({ props: directoryexplorer_props });
	binding_callbacks.push(() => bind(directoryexplorer, 'value', directoryexplorer_value_binding));

	return {
		c() {
			create_component(directoryexplorer.$$.fragment);
		},
		m(target, anchor) {
			mount_component(directoryexplorer, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const directoryexplorer_changes = {};
			if (dirty & /*file_count*/ 128) directoryexplorer_changes.file_count = /*file_count*/ ctx[7];
			if (dirty & /*interactive*/ 16384) directoryexplorer_changes.interactive = /*interactive*/ ctx[14];
			if (dirty & /*server*/ 8192) directoryexplorer_changes.ls_fn = /*server*/ ctx[13].ls;

			if (!updating_value && dirty & /*value*/ 1) {
				updating_value = true;
				directoryexplorer_changes.value = /*value*/ ctx[0];
				add_flush_callback(() => updating_value = false);
			}

			directoryexplorer.$set(directoryexplorer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(directoryexplorer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(directoryexplorer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(directoryexplorer, detaching);
		}
	};
}

// (34:0) <Block  {visible}  variant={value === null ? "dashed" : "solid"}  border_mode={"base"}  padding={false}  {elem_id}  {elem_classes}  {container}  {scale}  {min_width}  allow_overflow={false}  {height} >
function create_default_slot(ctx) {
	let statustracker;
	let t0;
	let blocklabel;
	let t1;
	let previous_key = /*rerender_key*/ ctx[15];
	let key_block_anchor;
	let current;

	const statustracker_spread_levels = [
		/*loading_status*/ ctx[8],
		{
			autoscroll: /*gradio*/ ctx[12].autoscroll
		},
		{ i18n: /*gradio*/ ctx[12].i18n }
	];

	let statustracker_props = {};

	for (let i = 0; i < statustracker_spread_levels.length; i += 1) {
		statustracker_props = assign(statustracker_props, statustracker_spread_levels[i]);
	}

	statustracker = new Static({ props: statustracker_props });

	blocklabel = new BlockLabel({
			props: {
				show_label: /*show_label*/ ctx[5],
				Icon: File,
				label: /*label*/ ctx[4] || "FileExplorer",
				float: false
			}
		});

	let key_block = create_key_block(ctx);

	return {
		c() {
			create_component(statustracker.$$.fragment);
			t0 = space();
			create_component(blocklabel.$$.fragment);
			t1 = space();
			key_block.c();
			key_block_anchor = empty();
		},
		m(target, anchor) {
			mount_component(statustracker, target, anchor);
			insert(target, t0, anchor);
			mount_component(blocklabel, target, anchor);
			insert(target, t1, anchor);
			key_block.m(target, anchor);
			insert(target, key_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const statustracker_changes = (dirty & /*loading_status, gradio*/ 4352)
			? get_spread_update(statustracker_spread_levels, [
					dirty & /*loading_status*/ 256 && get_spread_object(/*loading_status*/ ctx[8]),
					dirty & /*gradio*/ 4096 && {
						autoscroll: /*gradio*/ ctx[12].autoscroll
					},
					dirty & /*gradio*/ 4096 && { i18n: /*gradio*/ ctx[12].i18n }
				])
			: {};

			statustracker.$set(statustracker_changes);
			const blocklabel_changes = {};
			if (dirty & /*show_label*/ 32) blocklabel_changes.show_label = /*show_label*/ ctx[5];
			if (dirty & /*label*/ 16) blocklabel_changes.label = /*label*/ ctx[4] || "FileExplorer";
			blocklabel.$set(blocklabel_changes);

			if (dirty & /*rerender_key*/ 32768 && safe_not_equal(previous_key, previous_key = /*rerender_key*/ ctx[15])) {
				group_outros();
				transition_out(key_block, 1, 1, noop);
				check_outros();
				key_block = create_key_block(ctx);
				key_block.c();
				transition_in(key_block, 1);
				key_block.m(key_block_anchor.parentNode, key_block_anchor);
			} else {
				key_block.p(ctx, dirty);
			}
		},
		i(local) {
			if (current) return;
			transition_in(statustracker.$$.fragment, local);
			transition_in(blocklabel.$$.fragment, local);
			transition_in(key_block);
			current = true;
		},
		o(local) {
			transition_out(statustracker.$$.fragment, local);
			transition_out(blocklabel.$$.fragment, local);
			transition_out(key_block);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(t0);
				detach(t1);
				detach(key_block_anchor);
			}

			destroy_component(statustracker, detaching);
			destroy_component(blocklabel, detaching);
			key_block.d(detaching);
		}
	};
}

function create_fragment(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				visible: /*visible*/ ctx[3],
				variant: /*value*/ ctx[0] === null ? "dashed" : "solid",
				border_mode: "base",
				padding: false,
				elem_id: /*elem_id*/ ctx[1],
				elem_classes: /*elem_classes*/ ctx[2],
				container: /*container*/ ctx[9],
				scale: /*scale*/ ctx[10],
				min_width: /*min_width*/ ctx[11],
				allow_overflow: false,
				height: /*height*/ ctx[6],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(block.$$.fragment);
		},
		m(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const block_changes = {};
			if (dirty & /*visible*/ 8) block_changes.visible = /*visible*/ ctx[3];
			if (dirty & /*value*/ 1) block_changes.variant = /*value*/ ctx[0] === null ? "dashed" : "solid";
			if (dirty & /*elem_id*/ 2) block_changes.elem_id = /*elem_id*/ ctx[1];
			if (dirty & /*elem_classes*/ 4) block_changes.elem_classes = /*elem_classes*/ ctx[2];
			if (dirty & /*container*/ 512) block_changes.container = /*container*/ ctx[9];
			if (dirty & /*scale*/ 1024) block_changes.scale = /*scale*/ ctx[10];
			if (dirty & /*min_width*/ 2048) block_changes.min_width = /*min_width*/ ctx[11];
			if (dirty & /*height*/ 64) block_changes.height = /*height*/ ctx[6];

			if (dirty & /*$$scope, rerender_key, file_count, interactive, server, value, show_label, label, loading_status, gradio*/ 2159025) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(block, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let rerender_key;
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { visible = true } = $$props;
	let { value } = $$props;
	let old_value;
	let { label } = $$props;
	let { show_label } = $$props;
	let { height = undefined } = $$props;
	let { file_count = "multiple" } = $$props;
	let { root_dir } = $$props;
	let { glob } = $$props;
	let { ignore_glob } = $$props;
	let { loading_status } = $$props;
	let { container = true } = $$props;
	let { scale = null } = $$props;
	let { min_width = undefined } = $$props;
	let { gradio } = $$props;
	let { server } = $$props;
	let { interactive } = $$props;

	function directoryexplorer_value_binding(value$1) {
		value = value$1;
		$$invalidate(0, value);
	}

	$$self.$$set = $$props => {
		if ('elem_id' in $$props) $$invalidate(1, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(2, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(3, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('label' in $$props) $$invalidate(4, label = $$props.label);
		if ('show_label' in $$props) $$invalidate(5, show_label = $$props.show_label);
		if ('height' in $$props) $$invalidate(6, height = $$props.height);
		if ('file_count' in $$props) $$invalidate(7, file_count = $$props.file_count);
		if ('root_dir' in $$props) $$invalidate(16, root_dir = $$props.root_dir);
		if ('glob' in $$props) $$invalidate(17, glob = $$props.glob);
		if ('ignore_glob' in $$props) $$invalidate(18, ignore_glob = $$props.ignore_glob);
		if ('loading_status' in $$props) $$invalidate(8, loading_status = $$props.loading_status);
		if ('container' in $$props) $$invalidate(9, container = $$props.container);
		if ('scale' in $$props) $$invalidate(10, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(11, min_width = $$props.min_width);
		if ('gradio' in $$props) $$invalidate(12, gradio = $$props.gradio);
		if ('server' in $$props) $$invalidate(13, server = $$props.server);
		if ('interactive' in $$props) $$invalidate(14, interactive = $$props.interactive);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*root_dir, glob, ignore_glob*/ 458752) {
			$$invalidate(15, rerender_key = [root_dir, glob, ignore_glob]);
		}

		if ($$self.$$.dirty & /*value, old_value, gradio*/ 528385) {
			if (JSON.stringify(value) !== JSON.stringify(old_value)) {
				$$invalidate(19, old_value = value);
				gradio.dispatch("change");
			}
		}
	};

	return [
		value,
		elem_id,
		elem_classes,
		visible,
		label,
		show_label,
		height,
		file_count,
		loading_status,
		container,
		scale,
		min_width,
		gradio,
		server,
		interactive,
		rerender_key,
		root_dir,
		glob,
		ignore_glob,
		old_value,
		directoryexplorer_value_binding
	];
}

class Index extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			elem_id: 1,
			elem_classes: 2,
			visible: 3,
			value: 0,
			label: 4,
			show_label: 5,
			height: 6,
			file_count: 7,
			root_dir: 16,
			glob: 17,
			ignore_glob: 18,
			loading_status: 8,
			container: 9,
			scale: 10,
			min_width: 11,
			gradio: 12,
			server: 13,
			interactive: 14
		});
	}

	get elem_id() {
		return this.$$.ctx[1];
	}

	set elem_id(elem_id) {
		this.$$set({ elem_id });
		flush();
	}

	get elem_classes() {
		return this.$$.ctx[2];
	}

	set elem_classes(elem_classes) {
		this.$$set({ elem_classes });
		flush();
	}

	get visible() {
		return this.$$.ctx[3];
	}

	set visible(visible) {
		this.$$set({ visible });
		flush();
	}

	get value() {
		return this.$$.ctx[0];
	}

	set value(value) {
		this.$$set({ value });
		flush();
	}

	get label() {
		return this.$$.ctx[4];
	}

	set label(label) {
		this.$$set({ label });
		flush();
	}

	get show_label() {
		return this.$$.ctx[5];
	}

	set show_label(show_label) {
		this.$$set({ show_label });
		flush();
	}

	get height() {
		return this.$$.ctx[6];
	}

	set height(height) {
		this.$$set({ height });
		flush();
	}

	get file_count() {
		return this.$$.ctx[7];
	}

	set file_count(file_count) {
		this.$$set({ file_count });
		flush();
	}

	get root_dir() {
		return this.$$.ctx[16];
	}

	set root_dir(root_dir) {
		this.$$set({ root_dir });
		flush();
	}

	get glob() {
		return this.$$.ctx[17];
	}

	set glob(glob) {
		this.$$set({ glob });
		flush();
	}

	get ignore_glob() {
		return this.$$.ctx[18];
	}

	set ignore_glob(ignore_glob) {
		this.$$set({ ignore_glob });
		flush();
	}

	get loading_status() {
		return this.$$.ctx[8];
	}

	set loading_status(loading_status) {
		this.$$set({ loading_status });
		flush();
	}

	get container() {
		return this.$$.ctx[9];
	}

	set container(container) {
		this.$$set({ container });
		flush();
	}

	get scale() {
		return this.$$.ctx[10];
	}

	set scale(scale) {
		this.$$set({ scale });
		flush();
	}

	get min_width() {
		return this.$$.ctx[11];
	}

	set min_width(min_width) {
		this.$$set({ min_width });
		flush();
	}

	get gradio() {
		return this.$$.ctx[12];
	}

	set gradio(gradio) {
		this.$$set({ gradio });
		flush();
	}

	get server() {
		return this.$$.ctx[13];
	}

	set server(server) {
		this.$$set({ server });
		flush();
	}

	get interactive() {
		return this.$$.ctx[14];
	}

	set interactive(interactive) {
		this.$$set({ interactive });
		flush();
	}
}

export { Index as default };
//# sourceMappingURL=Index-c871e021.js.map
