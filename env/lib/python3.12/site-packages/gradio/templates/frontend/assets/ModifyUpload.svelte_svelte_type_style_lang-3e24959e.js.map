{"version":3,"file":"ModifyUpload.svelte_svelte_type_style_lang-3e24959e.js","sources":["../../../../js/upload/src/UploadProgress.svelte","../../../../js/upload/src/Upload.svelte"],"sourcesContent":["<script lang=\"ts\">\n\timport { FileData } from \"@gradio/client\";\n\timport { onMount, createEventDispatcher, getContext } from \"svelte\";\n\n\ttype FileDataWithProgress = FileData & { progress: number };\n\n\texport let upload_id: string;\n\texport let root: string;\n\texport let files: FileData[];\n\n\tlet event_source: EventSource;\n\tlet progress = false;\n\tlet current_file_upload: FileDataWithProgress;\n\tlet file_to_display: FileDataWithProgress;\n\n\tlet files_with_progress: FileDataWithProgress[] = files.map((file) => {\n\t\treturn {\n\t\t\t...file,\n\t\t\tprogress: 0\n\t\t};\n\t});\n\n\tconst dispatch = createEventDispatcher();\n\n\tfunction handleProgress(filename: string, chunk_size: number): void {\n\t\t// Find the corresponding file in the array and update its progress\n\t\tfiles_with_progress = files_with_progress.map((file) => {\n\t\t\tif (file.orig_name === filename) {\n\t\t\t\tfile.progress += chunk_size;\n\t\t\t}\n\t\t\treturn file;\n\t\t});\n\t}\n\n\tfunction getProgress(file: FileDataWithProgress): number {\n\t\treturn (file.progress * 100) / (file.size || 0) || 0;\n\t}\n\n\tconst EventSource_factory = getContext<(url: URL) => EventSource>(\n\t\t\"EventSource_factory\"\n\t);\n\tonMount(() => {\n\t\tevent_source = EventSource_factory(\n\t\t\tnew URL(`${root}/upload_progress?upload_id=${upload_id}`)\n\t\t);\n\t\t// Event listener for progress updates\n\t\tevent_source.onmessage = async function (event) {\n\t\t\tconst _data = JSON.parse(event.data);\n\t\t\tif (!progress) progress = true;\n\t\t\tif (_data.msg === \"done\") {\n\t\t\t\tevent_source.close();\n\t\t\t\tdispatch(\"done\");\n\t\t\t} else {\n\t\t\t\tcurrent_file_upload = _data;\n\t\t\t\thandleProgress(_data.orig_name, _data.chunk_size);\n\t\t\t}\n\t\t};\n\t});\n\n\tfunction calculateTotalProgress(files: FileData[]): number {\n\t\tlet totalProgress = 0;\n\t\tfiles.forEach((file) => {\n\t\t\ttotalProgress += getProgress(file as FileDataWithProgress);\n\t\t});\n\n\t\tdocument.documentElement.style.setProperty(\n\t\t\t\"--upload-progress-width\",\n\t\t\t(totalProgress / files.length).toFixed(2) + \"%\"\n\t\t);\n\n\t\treturn totalProgress / files.length;\n\t}\n\n\t$: calculateTotalProgress(files_with_progress);\n\n\t$: file_to_display = current_file_upload || files_with_progress[0];\n</script>\n\n<div class=\"wrap\" class:progress>\n\t<span class=\"uploading\"\n\t\t>Uploading {files_with_progress.length}\n\t\t{files_with_progress.length > 1 ? \"files\" : \"file\"}...</span\n\t>\n\n\t{#if file_to_display}\n\t\t<div class=\"file\">\n\t\t\t<span>\n\t\t\t\t<div class=\"progress-bar\">\n\t\t\t\t\t<progress\n\t\t\t\t\t\tstyle=\"visibility:hidden;height:0;width:0;\"\n\t\t\t\t\t\tvalue={getProgress(file_to_display)}\n\t\t\t\t\t\tmax=\"100\">{getProgress(file_to_display)}</progress\n\t\t\t\t\t>\n\t\t\t\t</div>\n\t\t\t</span>\n\t\t\t<span class=\"file-name\">\n\t\t\t\t{file_to_display.orig_name}\n\t\t\t</span>\n\t\t</div>\n\t{/if}\n</div>\n\n<style>\n\t.wrap {\n\t\toverflow-y: auto;\n\t\ttransition: opacity 0.5s ease-in-out;\n\t\tbackground: var(--block-background-fill);\n\t\tposition: relative;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\tmin-height: var(--size-40);\n\t\twidth: var(--size-full);\n\t}\n\n\t.wrap::after {\n\t\tcontent: \"\";\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\twidth: var(--upload-progress-width);\n\t\theight: 100%;\n\t\ttransition: all 0.5s ease-in-out;\n\t\tz-index: 1;\n\t}\n\n\t.uploading {\n\t\tfont-size: var(--text-lg);\n\t\tfont-family: var(--font);\n\t\tz-index: 2;\n\t}\n\n\t.file-name {\n\t\tmargin: var(--spacing-md);\n\t\tfont-size: var(--text-lg);\n\t\tcolor: var(--body-text-color-subdued);\n\t}\n\n\t.file {\n\t\tfont-size: var(--text-md);\n\t\tz-index: 2;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t}\n\n\t.file progress {\n\t\tdisplay: inline;\n\t\theight: var(--size-1);\n\t\twidth: 100%;\n\t\ttransition: all 0.5s ease-in-out;\n\t\tcolor: var(--color-accent);\n\t\tborder: none;\n\t}\n\n\t.file progress[value]::-webkit-progress-value {\n\t\tbackground-color: var(--color-accent);\n\t\tborder-radius: 20px;\n\t}\n\n\t.file progress[value]::-webkit-progress-bar {\n\t\tbackground-color: var(--border-color-accent);\n\t\tborder-radius: 20px;\n\t}\n\n\t.progress-bar {\n\t\twidth: 14px;\n\t\theight: 14px;\n\t\tborder-radius: 50%;\n\t\tbackground: radial-gradient(\n\t\t\t\tclosest-side,\n\t\t\t\tvar(--block-background-fill) 64%,\n\t\t\t\ttransparent 53% 100%\n\t\t\t),\n\t\t\tconic-gradient(\n\t\t\t\tvar(--color-accent) var(--upload-progress-width),\n\t\t\t\tvar(--border-color-accent) 0\n\t\t\t);\n\t\ttransition: all 0.5s ease-in-out;\n\t}\n</style>\n","<script lang=\"ts\">\n\timport { createEventDispatcher, tick, getContext } from \"svelte\";\n\timport type { FileData } from \"@gradio/client\";\n\timport { upload_files, upload, prepare_files } from \"@gradio/client\";\n\timport { _ } from \"svelte-i18n\";\n\timport UploadProgress from \"./UploadProgress.svelte\";\n\n\texport let filetype: string | string[] | null = null;\n\texport let dragging = false;\n\texport let boundedheight = true;\n\texport let center = true;\n\texport let flex = true;\n\texport let file_count = \"single\";\n\texport let disable_click = false;\n\texport let root: string;\n\texport let hidden = false;\n\texport let format: \"blob\" | \"file\" = \"file\";\n\texport let uploading = false;\n\n\tlet upload_id: string;\n\tlet file_data: FileData[];\n\tlet accept_file_types: string | null;\n\n\t// Needed for wasm support\n\tconst upload_fn = getContext<typeof upload_files>(\"upload_files\");\n\n\tlet hidden_upload: HTMLInputElement;\n\tconst dispatch = createEventDispatcher();\n\tconst validFileTypes = [\"image\", \"video\", \"audio\", \"text\", \"file\"];\n\tconst processFileType = (type: string): string => {\n\t\tif (type.startsWith(\".\") || type.endsWith(\"/*\")) {\n\t\t\treturn type;\n\t\t}\n\t\tif (validFileTypes.includes(type)) {\n\t\t\treturn type + \"/*\";\n\t\t}\n\t\treturn \".\" + type;\n\t};\n\n\t$: if (filetype == null) {\n\t\taccept_file_types = null;\n\t} else if (typeof filetype === \"string\") {\n\t\taccept_file_types = processFileType(filetype);\n\t} else {\n\t\tfiletype = filetype.map(processFileType);\n\t\taccept_file_types = filetype.join(\", \");\n\t}\n\n\tfunction updateDragging(): void {\n\t\tdragging = !dragging;\n\t}\n\n\texport function paste_clipboard(): void {\n\t\tnavigator.clipboard.read().then(async (items) => {\n\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\tconst type = items[i].types.find((t) => t.startsWith(\"image/\"));\n\t\t\t\tif (type) {\n\t\t\t\t\titems[i].getType(type).then(async (blob) => {\n\t\t\t\t\t\tconst file = new File(\n\t\t\t\t\t\t\t[blob],\n\t\t\t\t\t\t\t`clipboard.${type.replace(\"image/\", \"\")}`\n\t\t\t\t\t\t);\n\t\t\t\t\t\tawait load_files([file]);\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\texport function open_file_upload(): void {\n\t\tif (disable_click) return;\n\t\thidden_upload.value = \"\";\n\t\thidden_upload.click();\n\t}\n\n\tasync function handle_upload(\n\t\tfile_data: FileData[]\n\t): Promise<(FileData | null)[]> {\n\t\tawait tick();\n\t\tupload_id = Math.random().toString(36).substring(2, 15);\n\t\tuploading = true;\n\t\tconst _file_data = await upload(file_data, root, upload_id, upload_fn);\n\t\tdispatch(\"load\", file_count === \"single\" ? _file_data?.[0] : _file_data);\n\t\tuploading = false;\n\t\treturn _file_data || [];\n\t}\n\n\texport async function load_files(\n\t\tfiles: File[] | Blob[]\n\t): Promise<(FileData | null)[] | void> {\n\t\tif (!files.length) {\n\t\t\treturn;\n\t\t}\n\t\tlet _files: File[] = files.map((f) => new File([f], f.name));\n\t\tfile_data = await prepare_files(_files);\n\t\treturn await handle_upload(file_data);\n\t}\n\n\tasync function load_files_from_upload(e: Event): Promise<void> {\n\t\tconst target = e.target as HTMLInputElement;\n\t\tif (!target.files) return;\n\t\tif (format != \"blob\") {\n\t\t\tawait load_files(Array.from(target.files));\n\t\t} else {\n\t\t\tif (file_count === \"single\") {\n\t\t\t\tdispatch(\"load\", target.files[0]);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdispatch(\"load\", target.files);\n\t\t}\n\t}\n\n\tfunction is_valid_mimetype(\n\t\tfile_accept: string | string[] | null,\n\t\tuploaded_file_extension: string,\n\t\tuploaded_file_type: string\n\t): boolean {\n\t\tif (\n\t\t\t!file_accept ||\n\t\t\tfile_accept === \"*\" ||\n\t\t\tfile_accept === \"file/*\" ||\n\t\t\t(Array.isArray(file_accept) &&\n\t\t\t\tfile_accept.some((accept) => accept === \"*\" || accept === \"file/*\"))\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t\tlet acceptArray: string[];\n\t\tif (typeof file_accept === \"string\") {\n\t\t\tacceptArray = file_accept.split(\",\").map((s) => s.trim());\n\t\t} else if (Array.isArray(file_accept)) {\n\t\t\tacceptArray = file_accept;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t\treturn (\n\t\t\tacceptArray.includes(uploaded_file_extension) ||\n\t\t\tacceptArray.some((type) => {\n\t\t\t\tconst [category] = type.split(\"/\").map((s) => s.trim());\n\t\t\t\treturn (\n\t\t\t\t\ttype.endsWith(\"/*\") && uploaded_file_type.startsWith(category + \"/\")\n\t\t\t\t);\n\t\t\t})\n\t\t);\n\t}\n\n\tasync function loadFilesFromDrop(e: DragEvent): Promise<void> {\n\t\tdragging = false;\n\t\tif (!e.dataTransfer?.files) return;\n\t\tconst files_to_load = Array.from(e.dataTransfer.files).filter((file) => {\n\t\t\tconst file_extension = \".\" + file.name.split(\".\").pop();\n\t\t\tif (\n\t\t\t\tfile_extension &&\n\t\t\t\tis_valid_mimetype(accept_file_types, file_extension, file.type)\n\t\t\t) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (\n\t\t\t\tfile_extension && Array.isArray(filetype)\n\t\t\t\t\t? filetype.includes(file_extension)\n\t\t\t\t\t: file_extension === filetype\n\t\t\t) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tdispatch(\"error\", `Invalid file type only ${filetype} allowed.`);\n\t\t\treturn false;\n\t\t});\n\t\tawait load_files(files_to_load);\n\t}\n</script>\n\n{#if filetype === \"clipboard\"}\n\t<button\n\t\tclass:hidden\n\t\tclass:center\n\t\tclass:boundedheight\n\t\tclass:flex\n\t\tstyle:height=\"100%\"\n\t\ttabindex={hidden ? -1 : 0}\n\t\ton:click={paste_clipboard}\n\t>\n\t\t<slot />\n\t</button>\n{:else if uploading}\n\t{#if !hidden}\n\t\t<UploadProgress {root} {upload_id} files={file_data} />\n\t{/if}\n{:else}\n\t<button\n\t\tclass:hidden\n\t\tclass:center\n\t\tclass:boundedheight\n\t\tclass:flex\n\t\tstyle:height=\"100%\"\n\t\ttabindex={hidden ? -1 : 0}\n\t\ton:drag|preventDefault|stopPropagation\n\t\ton:dragstart|preventDefault|stopPropagation\n\t\ton:dragend|preventDefault|stopPropagation\n\t\ton:dragover|preventDefault|stopPropagation\n\t\ton:dragenter|preventDefault|stopPropagation\n\t\ton:dragleave|preventDefault|stopPropagation\n\t\ton:drop|preventDefault|stopPropagation\n\t\ton:click={open_file_upload}\n\t\ton:drop={loadFilesFromDrop}\n\t\ton:dragenter={updateDragging}\n\t\ton:dragleave={updateDragging}\n\t>\n\t\t<slot />\n\t\t<input\n\t\t\taria-label=\"file upload\"\n\t\t\tdata-testid=\"file-upload\"\n\t\t\ttype=\"file\"\n\t\t\tbind:this={hidden_upload}\n\t\t\ton:change={load_files_from_upload}\n\t\t\taccept={accept_file_types}\n\t\t\tmultiple={file_count === \"multiple\" || undefined}\n\t\t\twebkitdirectory={file_count === \"directory\" || undefined}\n\t\t\tmozdirectory={file_count === \"directory\" || undefined}\n\t\t/>\n\t</button>\n{/if}\n\n<style>\n\tbutton {\n\t\tcursor: pointer;\n\t\twidth: var(--size-full);\n\t}\n\n\t.hidden {\n\t\tdisplay: none;\n\t\theight: 0 !important;\n\t\tposition: absolute;\n\t\twidth: 0;\n\t\tflex-grow: 0;\n\t}\n\n\t.center {\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t}\n\t.flex {\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t}\n\n\tinput {\n\t\tdisplay: none;\n\t}\n</style>\n"],"names":["createEventDispatcher","getContext","insert","append","create_if_block"],"mappings":"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"}