import './Button-bd009e9a.js';
import { I as IconButton } from './IconButton-9a708715.js';
import { C as Clear } from './Upload-96564545.js';
import { D as DownloadLink, a as Download } from './DownloadLink-e3ba8890.js';
import './Index-7fdff9d2.js';
import { U as Undo } from './Undo-6c110254.js';
import './ModifyUpload.svelte_svelte_type_style_lang-3e24959e.js';

/* home/runner/work/gradio/gradio/js/icons/src/Edit.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent: SvelteComponent$1,
	append: append$1,
	attr: attr$1,
	detach: detach$1,
	init: init$1,
	insert: insert$1,
	noop,
	safe_not_equal: safe_not_equal$1,
	svg_element
} = window.__gradio__svelte__internal;
function create_fragment$1(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr$1(path, "d", "M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z");
			attr$1(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr$1(svg, "width", "100%");
			attr$1(svg, "height", "100%");
			attr$1(svg, "viewBox", "0 0 24 24");
			attr$1(svg, "fill", "none");
			attr$1(svg, "stroke", "currentColor");
			attr$1(svg, "stroke-width", "1.5");
			attr$1(svg, "stroke-linecap", "round");
			attr$1(svg, "stroke-linejoin", "round");
			attr$1(svg, "class", "feather feather-edit-2");
		},
		m(target, anchor) {
			insert$1(target, svg, anchor);
			append$1(svg, path);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) {
				detach$1(svg);
			}
		}
	};
}

class Edit extends SvelteComponent$1 {
	constructor(options) {
		super();
		init$1(this, options, null, create_fragment$1, safe_not_equal$1, {});
	}
}

/* home/runner/work/gradio/gradio/js/upload/src/ModifyUpload.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent,
	append,
	attr,
	check_outros,
	create_component,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_style,
	space,
	toggle_class,
	transition_in,
	transition_out
} = window.__gradio__svelte__internal;const { createEventDispatcher } = window.__gradio__svelte__internal;
function create_if_block_2(ctx) {
	let iconbutton;
	let current;

	iconbutton = new IconButton({
			props: {
				Icon: Edit,
				label: /*i18n*/ ctx[4]("common.edit")
			}
		});

	iconbutton.$on("click", /*click_handler*/ ctx[6]);

	return {
		c() {
			create_component(iconbutton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(iconbutton, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const iconbutton_changes = {};
			if (dirty & /*i18n*/ 16) iconbutton_changes.label = /*i18n*/ ctx[4]("common.edit");
			iconbutton.$set(iconbutton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(iconbutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(iconbutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(iconbutton, detaching);
		}
	};
}

// (25:1) {#if undoable}
function create_if_block_1(ctx) {
	let iconbutton;
	let current;

	iconbutton = new IconButton({
			props: {
				Icon: Undo,
				label: /*i18n*/ ctx[4]("common.undo")
			}
		});

	iconbutton.$on("click", /*click_handler_1*/ ctx[7]);

	return {
		c() {
			create_component(iconbutton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(iconbutton, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const iconbutton_changes = {};
			if (dirty & /*i18n*/ 16) iconbutton_changes.label = /*i18n*/ ctx[4]("common.undo");
			iconbutton.$set(iconbutton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(iconbutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(iconbutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(iconbutton, detaching);
		}
	};
}

// (33:1) {#if download}
function create_if_block(ctx) {
	let downloadlink;
	let current;

	downloadlink = new DownloadLink({
			props: {
				href: /*download*/ ctx[2],
				download: true,
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(downloadlink.$$.fragment);
		},
		m(target, anchor) {
			mount_component(downloadlink, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const downloadlink_changes = {};
			if (dirty & /*download*/ 4) downloadlink_changes.href = /*download*/ ctx[2];

			if (dirty & /*$$scope, i18n*/ 528) {
				downloadlink_changes.$$scope = { dirty, ctx };
			}

			downloadlink.$set(downloadlink_changes);
		},
		i(local) {
			if (current) return;
			transition_in(downloadlink.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(downloadlink.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(downloadlink, detaching);
		}
	};
}

// (34:2) <DownloadLink href={download} download>
function create_default_slot(ctx) {
	let iconbutton;
	let current;

	iconbutton = new IconButton({
			props: {
				Icon: Download,
				label: /*i18n*/ ctx[4]("common.download")
			}
		});

	return {
		c() {
			create_component(iconbutton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(iconbutton, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const iconbutton_changes = {};
			if (dirty & /*i18n*/ 16) iconbutton_changes.label = /*i18n*/ ctx[4]("common.download");
			iconbutton.$set(iconbutton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(iconbutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(iconbutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(iconbutton, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let t0;
	let t1;
	let t2;
	let iconbutton;
	let current;
	let if_block0 = /*editable*/ ctx[0] && create_if_block_2(ctx);
	let if_block1 = /*undoable*/ ctx[1] && create_if_block_1(ctx);
	let if_block2 = /*download*/ ctx[2] && create_if_block(ctx);

	iconbutton = new IconButton({
			props: {
				Icon: Clear,
				label: /*i18n*/ ctx[4]("common.clear")
			}
		});

	iconbutton.$on("click", /*click_handler_2*/ ctx[8]);

	return {
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			t2 = space();
			create_component(iconbutton.$$.fragment);
			attr(div, "class", "svelte-19sk1im");
			toggle_class(div, "not-absolute", !/*absolute*/ ctx[3]);
			set_style(div, "position", /*absolute*/ ctx[3] ? "absolute" : "static");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append(div, t0);
			if (if_block1) if_block1.m(div, null);
			append(div, t1);
			if (if_block2) if_block2.m(div, null);
			append(div, t2);
			mount_component(iconbutton, div, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*editable*/ ctx[0]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*editable*/ 1) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_2(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*undoable*/ ctx[1]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*undoable*/ 2) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_1(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*download*/ ctx[2]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty & /*download*/ 4) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div, t2);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			const iconbutton_changes = {};
			if (dirty & /*i18n*/ 16) iconbutton_changes.label = /*i18n*/ ctx[4]("common.clear");
			iconbutton.$set(iconbutton_changes);

			if (!current || dirty & /*absolute*/ 8) {
				toggle_class(div, "not-absolute", !/*absolute*/ ctx[3]);
			}

			if (dirty & /*absolute*/ 8) {
				set_style(div, "position", /*absolute*/ ctx[3] ? "absolute" : "static");
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			transition_in(iconbutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			transition_out(iconbutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(div);
			}

			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			destroy_component(iconbutton);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { editable = false } = $$props;
	let { undoable = false } = $$props;
	let { download = null } = $$props;
	let { absolute = true } = $$props;
	let { i18n } = $$props;
	const dispatch = createEventDispatcher();
	const click_handler = () => dispatch("edit");
	const click_handler_1 = () => dispatch("undo");

	const click_handler_2 = event => {
		dispatch("clear");
		event.stopPropagation();
	};

	$$self.$$set = $$props => {
		if ('editable' in $$props) $$invalidate(0, editable = $$props.editable);
		if ('undoable' in $$props) $$invalidate(1, undoable = $$props.undoable);
		if ('download' in $$props) $$invalidate(2, download = $$props.download);
		if ('absolute' in $$props) $$invalidate(3, absolute = $$props.absolute);
		if ('i18n' in $$props) $$invalidate(4, i18n = $$props.i18n);
	};

	return [
		editable,
		undoable,
		download,
		absolute,
		i18n,
		dispatch,
		click_handler,
		click_handler_1,
		click_handler_2
	];
}

class ModifyUpload extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			editable: 0,
			undoable: 1,
			download: 2,
			absolute: 3,
			i18n: 4
		});
	}
}

export { ModifyUpload as M };
//# sourceMappingURL=ModifyUpload-3536306b.js.map
