import './index-10ead756.js';
import { a as Button } from './Button-bd009e9a.js';
import './svelte/svelte.js';
import './Index-7fdff9d2.js';

const DownloadButton_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/downloadbutton/shared/DownloadButton.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent: SvelteComponent$1,
	attr,
	create_component: create_component$1,
	create_slot,
	destroy_component: destroy_component$1,
	detach: detach$1,
	element,
	get_all_dirty_from_scope,
	get_slot_changes,
	init: init$1,
	insert: insert$1,
	mount_component: mount_component$1,
	safe_not_equal: safe_not_equal$1,
	space,
	src_url_equal,
	transition_in: transition_in$1,
	transition_out: transition_out$1,
	update_slot_base
} = window.__gradio__svelte__internal;
const { createEventDispatcher } = window.__gradio__svelte__internal;
function create_if_block(ctx) {
	let img;
	let img_src_value;
	let img_alt_value;

	return {
		c() {
			img = element("img");
			attr(img, "class", "button-icon svelte-yjn27e");
			if (!src_url_equal(img.src, img_src_value = /*icon*/ ctx[6].url)) attr(img, "src", img_src_value);
			attr(img, "alt", img_alt_value = `${/*value*/ ctx[5]} icon`);
		},
		m(target, anchor) {
			insert$1(target, img, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*icon*/ 64 && !src_url_equal(img.src, img_src_value = /*icon*/ ctx[6].url)) {
				attr(img, "src", img_src_value);
			}

			if (dirty & /*value*/ 32 && img_alt_value !== (img_alt_value = `${/*value*/ ctx[5]} icon`)) {
				attr(img, "alt", img_alt_value);
			}
		},
		d(detaching) {
			if (detaching) {
				detach$1(img);
			}
		}
	};
}

// (38:0) <BaseButton  {size}  {variant}  {elem_id}  {elem_classes}  {visible}  on:click={download_file}  {scale}  {min_width}  {disabled} >
function create_default_slot$1(ctx) {
	let t;
	let current;
	let if_block = /*icon*/ ctx[6] && create_if_block(ctx);
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);

	return {
		c() {
			if (if_block) if_block.c();
			t = space();
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert$1(target, t, anchor);

			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (/*icon*/ ctx[6]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(t.parentNode, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[12],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[12], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in$1(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out$1(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach$1(t);
			}

			if (if_block) if_block.d(detaching);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$1(ctx) {
	let basebutton;
	let current;

	basebutton = new Button({
			props: {
				size: /*size*/ ctx[4],
				variant: /*variant*/ ctx[3],
				elem_id: /*elem_id*/ ctx[0],
				elem_classes: /*elem_classes*/ ctx[1],
				visible: /*visible*/ ctx[2],
				scale: /*scale*/ ctx[8],
				min_width: /*min_width*/ ctx[9],
				disabled: /*disabled*/ ctx[7],
				$$slots: { default: [create_default_slot$1] },
				$$scope: { ctx }
			}
		});

	basebutton.$on("click", /*download_file*/ ctx[10]);

	return {
		c() {
			create_component$1(basebutton.$$.fragment);
		},
		m(target, anchor) {
			mount_component$1(basebutton, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const basebutton_changes = {};
			if (dirty & /*size*/ 16) basebutton_changes.size = /*size*/ ctx[4];
			if (dirty & /*variant*/ 8) basebutton_changes.variant = /*variant*/ ctx[3];
			if (dirty & /*elem_id*/ 1) basebutton_changes.elem_id = /*elem_id*/ ctx[0];
			if (dirty & /*elem_classes*/ 2) basebutton_changes.elem_classes = /*elem_classes*/ ctx[1];
			if (dirty & /*visible*/ 4) basebutton_changes.visible = /*visible*/ ctx[2];
			if (dirty & /*scale*/ 256) basebutton_changes.scale = /*scale*/ ctx[8];
			if (dirty & /*min_width*/ 512) basebutton_changes.min_width = /*min_width*/ ctx[9];
			if (dirty & /*disabled*/ 128) basebutton_changes.disabled = /*disabled*/ ctx[7];

			if (dirty & /*$$scope, icon, value*/ 4192) {
				basebutton_changes.$$scope = { dirty, ctx };
			}

			basebutton.$set(basebutton_changes);
		},
		i(local) {
			if (current) return;
			transition_in$1(basebutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out$1(basebutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component$1(basebutton, detaching);
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { visible = true } = $$props;
	let { variant = "secondary" } = $$props;
	let { size = "lg" } = $$props;
	let { value } = $$props;
	let { icon } = $$props;
	let { disabled = false } = $$props;
	let { scale = null } = $$props;
	let { min_width = undefined } = $$props;
	const dispatch = createEventDispatcher();

	function download_file() {
		if (!value?.url) {
			return;
		}

		let file_name;

		if (!value.orig_name && value.url) {
			const parts = value.url.split("/");
			file_name = parts[parts.length - 1];
			file_name = file_name.split("?")[0].split("#")[0];
		} else {
			file_name = value.orig_name;
		}

		const a = document.createElement("a");
		a.href = value.url;
		a.download = file_name || "file";
		document.body.appendChild(a);
		a.click();
		document.body.removeChild(a);
		dispatch("click");
	}

	$$self.$$set = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(1, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(2, visible = $$props.visible);
		if ('variant' in $$props) $$invalidate(3, variant = $$props.variant);
		if ('size' in $$props) $$invalidate(4, size = $$props.size);
		if ('value' in $$props) $$invalidate(5, value = $$props.value);
		if ('icon' in $$props) $$invalidate(6, icon = $$props.icon);
		if ('disabled' in $$props) $$invalidate(7, disabled = $$props.disabled);
		if ('scale' in $$props) $$invalidate(8, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(9, min_width = $$props.min_width);
		if ('$$scope' in $$props) $$invalidate(12, $$scope = $$props.$$scope);
	};

	return [
		elem_id,
		elem_classes,
		visible,
		variant,
		size,
		value,
		icon,
		disabled,
		scale,
		min_width,
		download_file,
		slots,
		$$scope
	];
}

class DownloadButton extends SvelteComponent$1 {
	constructor(options) {
		super();

		init$1(this, options, instance$1, create_fragment$1, safe_not_equal$1, {
			elem_id: 0,
			elem_classes: 1,
			visible: 2,
			variant: 3,
			size: 4,
			value: 5,
			icon: 6,
			disabled: 7,
			scale: 8,
			min_width: 9
		});
	}
}

const DownloadButton$1 = DownloadButton;

/* home/runner/work/gradio/gradio/js/downloadbutton/Index.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent,
	create_component,
	destroy_component,
	detach,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_data,
	text,
	transition_in,
	transition_out
} = window.__gradio__svelte__internal;
function create_default_slot(ctx) {
	let t_value = (/*label*/ ctx[10]
	? /*gradio*/ ctx[11].i18n(/*label*/ ctx[10])
	: "") + "";

	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*label, gradio*/ 3072 && t_value !== (t_value = (/*label*/ ctx[10]
			? /*gradio*/ ctx[11].i18n(/*label*/ ctx[10])
			: "") + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

function create_fragment(ctx) {
	let downloadbutton;
	let current;

	downloadbutton = new DownloadButton$1({
			props: {
				value: /*value*/ ctx[3],
				variant: /*variant*/ ctx[4],
				elem_id: /*elem_id*/ ctx[0],
				elem_classes: /*elem_classes*/ ctx[1],
				size: /*size*/ ctx[6],
				scale: /*scale*/ ctx[7],
				icon: /*icon*/ ctx[8],
				min_width: /*min_width*/ ctx[9],
				visible: /*visible*/ ctx[2],
				disabled: !/*interactive*/ ctx[5],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	downloadbutton.$on("click", /*click_handler*/ ctx[12]);

	return {
		c() {
			create_component(downloadbutton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(downloadbutton, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const downloadbutton_changes = {};
			if (dirty & /*value*/ 8) downloadbutton_changes.value = /*value*/ ctx[3];
			if (dirty & /*variant*/ 16) downloadbutton_changes.variant = /*variant*/ ctx[4];
			if (dirty & /*elem_id*/ 1) downloadbutton_changes.elem_id = /*elem_id*/ ctx[0];
			if (dirty & /*elem_classes*/ 2) downloadbutton_changes.elem_classes = /*elem_classes*/ ctx[1];
			if (dirty & /*size*/ 64) downloadbutton_changes.size = /*size*/ ctx[6];
			if (dirty & /*scale*/ 128) downloadbutton_changes.scale = /*scale*/ ctx[7];
			if (dirty & /*icon*/ 256) downloadbutton_changes.icon = /*icon*/ ctx[8];
			if (dirty & /*min_width*/ 512) downloadbutton_changes.min_width = /*min_width*/ ctx[9];
			if (dirty & /*visible*/ 4) downloadbutton_changes.visible = /*visible*/ ctx[2];
			if (dirty & /*interactive*/ 32) downloadbutton_changes.disabled = !/*interactive*/ ctx[5];

			if (dirty & /*$$scope, label, gradio*/ 11264) {
				downloadbutton_changes.$$scope = { dirty, ctx };
			}

			downloadbutton.$set(downloadbutton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(downloadbutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(downloadbutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(downloadbutton, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { visible = true } = $$props;
	let { value } = $$props;
	let { variant = "secondary" } = $$props;
	let { interactive } = $$props;
	let { size = "lg" } = $$props;
	let { scale = null } = $$props;
	let { icon = null } = $$props;
	let { min_width = undefined } = $$props;
	let { label = null } = $$props;
	let { gradio } = $$props;
	const click_handler = () => gradio.dispatch("click");

	$$self.$$set = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(1, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(2, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(3, value = $$props.value);
		if ('variant' in $$props) $$invalidate(4, variant = $$props.variant);
		if ('interactive' in $$props) $$invalidate(5, interactive = $$props.interactive);
		if ('size' in $$props) $$invalidate(6, size = $$props.size);
		if ('scale' in $$props) $$invalidate(7, scale = $$props.scale);
		if ('icon' in $$props) $$invalidate(8, icon = $$props.icon);
		if ('min_width' in $$props) $$invalidate(9, min_width = $$props.min_width);
		if ('label' in $$props) $$invalidate(10, label = $$props.label);
		if ('gradio' in $$props) $$invalidate(11, gradio = $$props.gradio);
	};

	return [
		elem_id,
		elem_classes,
		visible,
		value,
		variant,
		interactive,
		size,
		scale,
		icon,
		min_width,
		label,
		gradio,
		click_handler
	];
}

class Index extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			elem_id: 0,
			elem_classes: 1,
			visible: 2,
			value: 3,
			variant: 4,
			interactive: 5,
			size: 6,
			scale: 7,
			icon: 8,
			min_width: 9,
			label: 10,
			gradio: 11
		});
	}
}

export { DownloadButton$1 as BaseButton, Index as default };
//# sourceMappingURL=Index-20e95bc5.js.map
