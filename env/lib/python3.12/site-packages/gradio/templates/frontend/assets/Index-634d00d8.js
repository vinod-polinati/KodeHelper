import { B as BaseFileUpload, F as File } from './FileUpload-b86d6791.js';
export { a as FilePreview } from './FileUpload-b86d6791.js';
import { B as Block } from './Button-bd009e9a.js';
import { S as Static } from './Index-7fdff9d2.js';
import { U as UploadText } from './UploadText-f0b99b38.js';
export { default as BaseExample } from './Example-04e4c2ae.js';
import './BlockLabel-5d99d786.js';
import './Empty-dc0720f3.js';
import './File-e96cd7d6.js';
import './ModifyUpload.svelte_svelte_type_style_lang-3e24959e.js';
import './index-10ead756.js';
import './svelte/svelte.js';
import './ModifyUpload-3536306b.js';
import './IconButton-9a708715.js';
import './Upload-96564545.js';
import './DownloadLink-e3ba8890.js';
import './file-url-6213a515.js';
import './Undo-6c110254.js';
/* empty css                                                */
/* home/runner/work/gradio/gradio/js/file/Index.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent,
	assign,
	check_outros,
	create_component,
	destroy_component,
	detach,
	empty,
	flush,
	get_spread_object,
	get_spread_update,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} = window.__gradio__svelte__internal;
function create_else_block(ctx) {
	let fileupload;
	let current;

	fileupload = new BaseFileUpload({
			props: {
				label: /*label*/ ctx[6],
				show_label: /*show_label*/ ctx[7],
				value: /*value*/ ctx[0],
				file_count: /*file_count*/ ctx[15],
				file_types: /*file_types*/ ctx[16],
				selectable: /*_selectable*/ ctx[9],
				root: /*root*/ ctx[5],
				height: /*height*/ ctx[8],
				i18n: /*gradio*/ ctx[14].i18n,
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	fileupload.$on("change", /*change_handler*/ ctx[20]);
	fileupload.$on("drag", /*drag_handler*/ ctx[21]);
	fileupload.$on("clear", /*clear_handler*/ ctx[22]);
	fileupload.$on("select", /*select_handler_1*/ ctx[23]);
	fileupload.$on("upload", /*upload_handler*/ ctx[24]);

	return {
		c() {
			create_component(fileupload.$$.fragment);
		},
		m(target, anchor) {
			mount_component(fileupload, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const fileupload_changes = {};
			if (dirty & /*label*/ 64) fileupload_changes.label = /*label*/ ctx[6];
			if (dirty & /*show_label*/ 128) fileupload_changes.show_label = /*show_label*/ ctx[7];
			if (dirty & /*value*/ 1) fileupload_changes.value = /*value*/ ctx[0];
			if (dirty & /*file_count*/ 32768) fileupload_changes.file_count = /*file_count*/ ctx[15];
			if (dirty & /*file_types*/ 65536) fileupload_changes.file_types = /*file_types*/ ctx[16];
			if (dirty & /*_selectable*/ 512) fileupload_changes.selectable = /*_selectable*/ ctx[9];
			if (dirty & /*root*/ 32) fileupload_changes.root = /*root*/ ctx[5];
			if (dirty & /*height*/ 256) fileupload_changes.height = /*height*/ ctx[8];
			if (dirty & /*gradio*/ 16384) fileupload_changes.i18n = /*gradio*/ ctx[14].i18n;

			if (dirty & /*$$scope, gradio*/ 33570816) {
				fileupload_changes.$$scope = { dirty, ctx };
			}

			fileupload.$set(fileupload_changes);
		},
		i(local) {
			if (current) return;
			transition_in(fileupload.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(fileupload.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(fileupload, detaching);
		}
	};
}

// (59:1) {#if !interactive}
function create_if_block(ctx) {
	let file;
	let current;

	file = new File({
			props: {
				selectable: /*_selectable*/ ctx[9],
				value: /*value*/ ctx[0],
				label: /*label*/ ctx[6],
				show_label: /*show_label*/ ctx[7],
				height: /*height*/ ctx[8],
				i18n: /*gradio*/ ctx[14].i18n
			}
		});

	file.$on("select", /*select_handler*/ ctx[19]);

	return {
		c() {
			create_component(file.$$.fragment);
		},
		m(target, anchor) {
			mount_component(file, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const file_changes = {};
			if (dirty & /*_selectable*/ 512) file_changes.selectable = /*_selectable*/ ctx[9];
			if (dirty & /*value*/ 1) file_changes.value = /*value*/ ctx[0];
			if (dirty & /*label*/ 64) file_changes.label = /*label*/ ctx[6];
			if (dirty & /*show_label*/ 128) file_changes.show_label = /*show_label*/ ctx[7];
			if (dirty & /*height*/ 256) file_changes.height = /*height*/ ctx[8];
			if (dirty & /*gradio*/ 16384) file_changes.i18n = /*gradio*/ ctx[14].i18n;
			file.$set(file_changes);
		},
		i(local) {
			if (current) return;
			transition_in(file.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(file.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(file, detaching);
		}
	};
}

// (70:2) <FileUpload    {label}    {show_label}    {value}    {file_count}    {file_types}    selectable={_selectable}    {root}    {height}    on:change={({ detail }) => {     value = detail;    }}    on:drag={({ detail }) => (dragging = detail)}    on:clear={() => gradio.dispatch("clear")}    on:select={({ detail }) => gradio.dispatch("select", detail)}    on:upload={() => gradio.dispatch("upload")}    i18n={gradio.i18n}   >
function create_default_slot_1(ctx) {
	let uploadtext;
	let current;

	uploadtext = new UploadText({
			props: {
				i18n: /*gradio*/ ctx[14].i18n,
				type: "file"
			}
		});

	return {
		c() {
			create_component(uploadtext.$$.fragment);
		},
		m(target, anchor) {
			mount_component(uploadtext, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const uploadtext_changes = {};
			if (dirty & /*gradio*/ 16384) uploadtext_changes.i18n = /*gradio*/ ctx[14].i18n;
			uploadtext.$set(uploadtext_changes);
		},
		i(local) {
			if (current) return;
			transition_in(uploadtext.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(uploadtext.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(uploadtext, detaching);
		}
	};
}

// (39:0) <Block  {visible}  variant={value === null ? "dashed" : "solid"}  border_mode={dragging ? "focus" : "base"}  padding={false}  {elem_id}  {elem_classes}  {container}  {scale}  {min_width}  allow_overflow={false} >
function create_default_slot(ctx) {
	let statustracker;
	let t;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;

	const statustracker_spread_levels = [
		{
			autoscroll: /*gradio*/ ctx[14].autoscroll
		},
		{ i18n: /*gradio*/ ctx[14].i18n },
		/*loading_status*/ ctx[10],
		{
			status: /*loading_status*/ ctx[10]?.status || "complete"
		}
	];

	let statustracker_props = {};

	for (let i = 0; i < statustracker_spread_levels.length; i += 1) {
		statustracker_props = assign(statustracker_props, statustracker_spread_levels[i]);
	}

	statustracker = new Static({ props: statustracker_props });
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (!/*interactive*/ ctx[4]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			create_component(statustracker.$$.fragment);
			t = space();
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			mount_component(statustracker, target, anchor);
			insert(target, t, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const statustracker_changes = (dirty & /*gradio, loading_status, pending_upload*/ 17408)
			? get_spread_update(statustracker_spread_levels, [
					dirty & /*gradio*/ 16384 && {
						autoscroll: /*gradio*/ ctx[14].autoscroll
					},
					dirty & /*gradio*/ 16384 && { i18n: /*gradio*/ ctx[14].i18n },
					dirty & /*loading_status*/ 1024 && get_spread_object(/*loading_status*/ ctx[10]),
					dirty & /*pending_upload, loading_status*/ 1024 && {
						status: /*loading_status*/ ctx[10]?.status || "complete"
					}
				])
			: {};

			statustracker.$set(statustracker_changes);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(statustracker.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(statustracker.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(t);
				detach(if_block_anchor);
			}

			destroy_component(statustracker, detaching);
			if_blocks[current_block_type_index].d(detaching);
		}
	};
}

function create_fragment(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				visible: /*visible*/ ctx[3],
				variant: /*value*/ ctx[0] === null ? "dashed" : "solid",
				border_mode: /*dragging*/ ctx[17] ? "focus" : "base",
				padding: false,
				elem_id: /*elem_id*/ ctx[1],
				elem_classes: /*elem_classes*/ ctx[2],
				container: /*container*/ ctx[11],
				scale: /*scale*/ ctx[12],
				min_width: /*min_width*/ ctx[13],
				allow_overflow: false,
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(block.$$.fragment);
		},
		m(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const block_changes = {};
			if (dirty & /*visible*/ 8) block_changes.visible = /*visible*/ ctx[3];
			if (dirty & /*value*/ 1) block_changes.variant = /*value*/ ctx[0] === null ? "dashed" : "solid";
			if (dirty & /*dragging*/ 131072) block_changes.border_mode = /*dragging*/ ctx[17] ? "focus" : "base";
			if (dirty & /*elem_id*/ 2) block_changes.elem_id = /*elem_id*/ ctx[1];
			if (dirty & /*elem_classes*/ 4) block_changes.elem_classes = /*elem_classes*/ ctx[2];
			if (dirty & /*container*/ 2048) block_changes.container = /*container*/ ctx[11];
			if (dirty & /*scale*/ 4096) block_changes.scale = /*scale*/ ctx[12];
			if (dirty & /*min_width*/ 8192) block_changes.min_width = /*min_width*/ ctx[13];

			if (dirty & /*$$scope, _selectable, value, label, show_label, height, gradio, interactive, file_count, file_types, root, dragging, loading_status*/ 33802225) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(block, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { visible = true } = $$props;
	let { value } = $$props;
	let { interactive } = $$props;
	let { root } = $$props;
	let { label } = $$props;
	let { show_label } = $$props;
	let { height = undefined } = $$props;
	let { _selectable = false } = $$props;
	let { loading_status } = $$props;
	let { container = true } = $$props;
	let { scale = null } = $$props;
	let { min_width = undefined } = $$props;
	let { gradio } = $$props;
	let { file_count } = $$props;
	let { file_types = ["file"] } = $$props;
	let old_value = value;
	let dragging = false;
	const select_handler = ({ detail }) => gradio.dispatch("select", detail);

	const change_handler = ({ detail }) => {
		$$invalidate(0, value = detail);
	};

	const drag_handler = ({ detail }) => $$invalidate(17, dragging = detail);
	const clear_handler = () => gradio.dispatch("clear");
	const select_handler_1 = ({ detail }) => gradio.dispatch("select", detail);
	const upload_handler = () => gradio.dispatch("upload");

	$$self.$$set = $$props => {
		if ('elem_id' in $$props) $$invalidate(1, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(2, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(3, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('interactive' in $$props) $$invalidate(4, interactive = $$props.interactive);
		if ('root' in $$props) $$invalidate(5, root = $$props.root);
		if ('label' in $$props) $$invalidate(6, label = $$props.label);
		if ('show_label' in $$props) $$invalidate(7, show_label = $$props.show_label);
		if ('height' in $$props) $$invalidate(8, height = $$props.height);
		if ('_selectable' in $$props) $$invalidate(9, _selectable = $$props._selectable);
		if ('loading_status' in $$props) $$invalidate(10, loading_status = $$props.loading_status);
		if ('container' in $$props) $$invalidate(11, container = $$props.container);
		if ('scale' in $$props) $$invalidate(12, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(13, min_width = $$props.min_width);
		if ('gradio' in $$props) $$invalidate(14, gradio = $$props.gradio);
		if ('file_count' in $$props) $$invalidate(15, file_count = $$props.file_count);
		if ('file_types' in $$props) $$invalidate(16, file_types = $$props.file_types);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*old_value, value, gradio*/ 278529) {
			if (JSON.stringify(old_value) !== JSON.stringify(value)) {
				gradio.dispatch("change");
				$$invalidate(18, old_value = value);
			}
		}
	};

	return [
		value,
		elem_id,
		elem_classes,
		visible,
		interactive,
		root,
		label,
		show_label,
		height,
		_selectable,
		loading_status,
		container,
		scale,
		min_width,
		gradio,
		file_count,
		file_types,
		dragging,
		old_value,
		select_handler,
		change_handler,
		drag_handler,
		clear_handler,
		select_handler_1,
		upload_handler
	];
}

class Index extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			elem_id: 1,
			elem_classes: 2,
			visible: 3,
			value: 0,
			interactive: 4,
			root: 5,
			label: 6,
			show_label: 7,
			height: 8,
			_selectable: 9,
			loading_status: 10,
			container: 11,
			scale: 12,
			min_width: 13,
			gradio: 14,
			file_count: 15,
			file_types: 16
		});
	}

	get elem_id() {
		return this.$$.ctx[1];
	}

	set elem_id(elem_id) {
		this.$$set({ elem_id });
		flush();
	}

	get elem_classes() {
		return this.$$.ctx[2];
	}

	set elem_classes(elem_classes) {
		this.$$set({ elem_classes });
		flush();
	}

	get visible() {
		return this.$$.ctx[3];
	}

	set visible(visible) {
		this.$$set({ visible });
		flush();
	}

	get value() {
		return this.$$.ctx[0];
	}

	set value(value) {
		this.$$set({ value });
		flush();
	}

	get interactive() {
		return this.$$.ctx[4];
	}

	set interactive(interactive) {
		this.$$set({ interactive });
		flush();
	}

	get root() {
		return this.$$.ctx[5];
	}

	set root(root) {
		this.$$set({ root });
		flush();
	}

	get label() {
		return this.$$.ctx[6];
	}

	set label(label) {
		this.$$set({ label });
		flush();
	}

	get show_label() {
		return this.$$.ctx[7];
	}

	set show_label(show_label) {
		this.$$set({ show_label });
		flush();
	}

	get height() {
		return this.$$.ctx[8];
	}

	set height(height) {
		this.$$set({ height });
		flush();
	}

	get _selectable() {
		return this.$$.ctx[9];
	}

	set _selectable(_selectable) {
		this.$$set({ _selectable });
		flush();
	}

	get loading_status() {
		return this.$$.ctx[10];
	}

	set loading_status(loading_status) {
		this.$$set({ loading_status });
		flush();
	}

	get container() {
		return this.$$.ctx[11];
	}

	set container(container) {
		this.$$set({ container });
		flush();
	}

	get scale() {
		return this.$$.ctx[12];
	}

	set scale(scale) {
		this.$$set({ scale });
		flush();
	}

	get min_width() {
		return this.$$.ctx[13];
	}

	set min_width(min_width) {
		this.$$set({ min_width });
		flush();
	}

	get gradio() {
		return this.$$.ctx[14];
	}

	set gradio(gradio) {
		this.$$set({ gradio });
		flush();
	}

	get file_count() {
		return this.$$.ctx[15];
	}

	set file_count(file_count) {
		this.$$set({ file_count });
		flush();
	}

	get file_types() {
		return this.$$.ctx[16];
	}

	set file_types(file_types) {
		this.$$set({ file_types });
		flush();
	}
}

export { File as BaseFile, BaseFileUpload, Index as default };
//# sourceMappingURL=Index-634d00d8.js.map
