const Example_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/dataframe/Example.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent,
	append,
	attr,
	destroy_each,
	detach,
	element,
	empty,
	ensure_array_like,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	space,
	text,
	toggle_class
} = window.__gradio__svelte__internal;
function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[9] = list[i];
	child_ctx[11] = i;
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[12] = list[i];
	child_ctx[14] = i;
	return child_ctx;
}

// (10:0) {#if loaded}
function create_if_block(ctx) {
	let div;
	let mounted;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (typeof /*loaded_value*/ ctx[5] === "string") return create_if_block_1;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			div = element("div");
			if_block.c();
			attr(div, "class", "svelte-1cib1xd");
			toggle_class(div, "table", /*type*/ ctx[1] === "table");
			toggle_class(div, "gallery", /*type*/ ctx[1] === "gallery");
			toggle_class(div, "selected", /*selected*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if_block.m(div, null);

			if (!mounted) {
				dispose = [
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[7]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[8])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if_block.p(ctx, dirty);

			if (dirty & /*type*/ 2) {
				toggle_class(div, "table", /*type*/ ctx[1] === "table");
			}

			if (dirty & /*type*/ 2) {
				toggle_class(div, "gallery", /*type*/ ctx[1] === "gallery");
			}

			if (dirty & /*selected*/ 4) {
				toggle_class(div, "selected", /*selected*/ ctx[2]);
			}
		},
		d(detaching) {
			if (detaching) {
				detach(div);
			}

			if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

// (22:2) {:else}
function create_else_block(ctx) {
	let table;
	let t;
	let each_value = ensure_array_like(/*loaded_value*/ ctx[5].slice(0, 3));
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	let if_block = /*value*/ ctx[0].length > 3 && create_if_block_2(ctx);

	return {
		c() {
			table = element("table");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			if (if_block) if_block.c();
			attr(table, "class", " svelte-1cib1xd");
		},
		m(target, anchor) {
			insert(target, table, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(table, null);
				}
			}

			append(table, t);
			if (if_block) if_block.m(table, null);
		},
		p(ctx, dirty) {
			if (dirty & /*loaded_value*/ 32) {
				each_value = ensure_array_like(/*loaded_value*/ ctx[5].slice(0, 3));
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(table, t);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (/*value*/ ctx[0].length > 3) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_2(ctx);
					if_block.c();
					if_block.m(table, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (detaching) {
				detach(table);
			}

			destroy_each(each_blocks, detaching);
			if (if_block) if_block.d();
		}
	};
}

// (20:2) {#if typeof loaded_value === "string"}
function create_if_block_1(ctx) {
	let t;

	return {
		c() {
			t = text(/*loaded_value*/ ctx[5]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (26:6) {#each row.slice(0, 3) as cell, j}
function create_each_block_1(ctx) {
	let td;

	return {
		c() {
			td = element("td");
			td.textContent = `${/*cell*/ ctx[12]}`;
			attr(td, "class", "svelte-1cib1xd");
		},
		m(target, anchor) {
			insert(target, td, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) {
				detach(td);
			}
		}
	};
}

// (29:6) {#if row.length > 3}
function create_if_block_3(ctx) {
	let td;

	return {
		c() {
			td = element("td");
			td.textContent = "â€¦";
			attr(td, "class", "svelte-1cib1xd");
		},
		m(target, anchor) {
			insert(target, td, anchor);
		},
		d(detaching) {
			if (detaching) {
				detach(td);
			}
		}
	};
}

// (24:4) {#each loaded_value.slice(0, 3) as row, i}
function create_each_block(ctx) {
	let tr;
	let t;
	let each_value_1 = ensure_array_like(/*row*/ ctx[9].slice(0, 3));
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let if_block = /*row*/ ctx[9].length > 3 && create_if_block_3();

	return {
		c() {
			tr = element("tr");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			if (if_block) if_block.c();
		},
		m(target, anchor) {
			insert(target, tr, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(tr, null);
				}
			}

			append(tr, t);
			if (if_block) if_block.m(tr, null);
		},
		p(ctx, dirty) {
			if (dirty & /*loaded_value*/ 32) {
				each_value_1 = ensure_array_like(/*row*/ ctx[9].slice(0, 3));
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(tr, t);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d(detaching) {
			if (detaching) {
				detach(tr);
			}

			destroy_each(each_blocks, detaching);
			if (if_block) if_block.d();
		}
	};
}

// (34:4) {#if value.length > 3}
function create_if_block_2(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			attr(div, "class", "overlay svelte-1cib1xd");
			toggle_class(div, "odd", /*index*/ ctx[3] % 2 != 0);
			toggle_class(div, "even", /*index*/ ctx[3] % 2 == 0);
			toggle_class(div, "button", /*type*/ ctx[1] === "gallery");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*index*/ 8) {
				toggle_class(div, "odd", /*index*/ ctx[3] % 2 != 0);
			}

			if (dirty & /*index*/ 8) {
				toggle_class(div, "even", /*index*/ ctx[3] % 2 == 0);
			}

			if (dirty & /*type*/ 2) {
				toggle_class(div, "button", /*type*/ ctx[1] === "gallery");
			}
		},
		d(detaching) {
			if (detaching) {
				detach(div);
			}
		}
	};
}

function create_fragment(ctx) {
	let if_block_anchor;
	let if_block = /*loaded*/ ctx[6] && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, [dirty]) {
			if (/*loaded*/ ctx[6]) if_block.p(ctx, dirty);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) {
				detach(if_block_anchor);
			}

			if (if_block) if_block.d(detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { value } = $$props;
	let { type } = $$props;
	let { selected = false } = $$props;
	let { index } = $$props;
	let hovered = false;
	let loaded_value = value;
	let loaded = Array.isArray(loaded_value);
	const mouseenter_handler = () => $$invalidate(4, hovered = true);
	const mouseleave_handler = () => $$invalidate(4, hovered = false);

	$$self.$$set = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('type' in $$props) $$invalidate(1, type = $$props.type);
		if ('selected' in $$props) $$invalidate(2, selected = $$props.selected);
		if ('index' in $$props) $$invalidate(3, index = $$props.index);
	};

	return [
		value,
		type,
		selected,
		index,
		hovered,
		loaded_value,
		loaded,
		mouseenter_handler,
		mouseleave_handler
	];
}

class Example extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { value: 0, type: 1, selected: 2, index: 3 });
	}
}

export { Example as default };
//# sourceMappingURL=Example-bac8e01d.js.map
