import { V as Video } from './Video-0f7b23bd.js';
import './index-10ead756.js';
import './file-url-6213a515.js';
import './Index-7fdff9d2.js';
import './svelte/svelte.js';

const Example_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/video/Example.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent,
	add_flush_callback,
	append,
	attr,
	bind,
	binding_callbacks,
	check_outros,
	create_component,
	destroy_component,
	detach,
	element,
	empty,
	group_outros,
	init: init_1,
	insert,
	is_function,
	mount_component,
	noop,
	safe_not_equal,
	set_data,
	text,
	toggle_class,
	transition_in,
	transition_out
} = window.__gradio__svelte__internal;
function create_if_block(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_1, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		return 0;
	}

	current_block_type_index = select_block_type();
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if_block.p(ctx, dirty);
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(if_block_anchor);
			}

			if_blocks[current_block_type_index].d(detaching);
		}
	};
}

// (36:1) {:else}
function create_else_block(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*value*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*value*/ 4) set_data(t, /*value*/ ctx[2]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) {
				detach(div);
			}
		}
	};
}

// (19:1) {#if playable()}
function create_if_block_1(ctx) {
	let div;
	let video_1;
	let updating_node;
	let current;

	function video_1_node_binding(value) {
		/*video_1_node_binding*/ ctx[5](value);
	}

	let video_1_props = {
		muted: true,
		playsinline: true,
		src: /*value*/ ctx[2]?.video.url
	};

	if (/*video*/ ctx[3] !== void 0) {
		video_1_props.node = /*video*/ ctx[3];
	}

	video_1 = new Video({ props: video_1_props });
	binding_callbacks.push(() => bind(video_1, 'node', video_1_node_binding));
	video_1.$on("loadeddata", /*init*/ ctx[4]);

	video_1.$on("mouseover", function () {
		if (is_function(/*video*/ ctx[3].play.bind(/*video*/ ctx[3]))) /*video*/ ctx[3].play.bind(/*video*/ ctx[3]).apply(this, arguments);
	});

	video_1.$on("mouseout", function () {
		if (is_function(/*video*/ ctx[3].pause.bind(/*video*/ ctx[3]))) /*video*/ ctx[3].pause.bind(/*video*/ ctx[3]).apply(this, arguments);
	});

	return {
		c() {
			div = element("div");
			create_component(video_1.$$.fragment);
			attr(div, "class", "container svelte-1de9zxs");
			toggle_class(div, "table", /*type*/ ctx[0] === "table");
			toggle_class(div, "gallery", /*type*/ ctx[0] === "gallery");
			toggle_class(div, "selected", /*selected*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(video_1, div, null);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const video_1_changes = {};
			if (dirty & /*value*/ 4) video_1_changes.src = /*value*/ ctx[2]?.video.url;

			if (!updating_node && dirty & /*video*/ 8) {
				updating_node = true;
				video_1_changes.node = /*video*/ ctx[3];
				add_flush_callback(() => updating_node = false);
			}

			video_1.$set(video_1_changes);

			if (!current || dirty & /*type*/ 1) {
				toggle_class(div, "table", /*type*/ ctx[0] === "table");
			}

			if (!current || dirty & /*type*/ 1) {
				toggle_class(div, "gallery", /*type*/ ctx[0] === "gallery");
			}

			if (!current || dirty & /*selected*/ 2) {
				toggle_class(div, "selected", /*selected*/ ctx[1]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(video_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(video_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(div);
			}

			destroy_component(video_1);
		}
	};
}

function create_fragment(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*value*/ ctx[2] && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*value*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*value*/ 4) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(if_block_anchor);
			}

			if (if_block) if_block.d(detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { type } = $$props;
	let { selected = false } = $$props;
	let { value } = $$props;
	let video;

	async function init() {
		$$invalidate(3, video.muted = true, video);
		$$invalidate(3, video.playsInline = true, video);
		$$invalidate(3, video.controls = false, video);
		video.setAttribute("muted", "");
		await video.play();
		video.pause();
	}

	function video_1_node_binding(value) {
		video = value;
		$$invalidate(3, video);
	}

	$$self.$$set = $$props => {
		if ('type' in $$props) $$invalidate(0, type = $$props.type);
		if ('selected' in $$props) $$invalidate(1, selected = $$props.selected);
		if ('value' in $$props) $$invalidate(2, value = $$props.value);
	};

	return [type, selected, value, video, init, video_1_node_binding];
}

class Example extends SvelteComponent {
	constructor(options) {
		super();
		init_1(this, options, instance, create_fragment, safe_not_equal, { type: 0, selected: 1, value: 2 });
	}
}

export { Example as default };
//# sourceMappingURL=Example-42e57db6.js.map
