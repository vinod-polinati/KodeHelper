import { P as Prism$1 } from './prism-python-2c627c47.js';
import './Index-7fdff9d2.js';
import './index-10ead756.js';
import './svelte/svelte.js';

const prism = '';

(function (Prism) {

	Prism.languages.typescript = Prism.languages.extend('javascript', {
		'class-name': {
			pattern: /(\b(?:class|extends|implements|instanceof|interface|new|type)\s+)(?!keyof\b)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?:\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,
			lookbehind: true,
			greedy: true,
			inside: null // see below
		},
		'builtin': /\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\b/,
	});

	// The keywords TypeScript adds to JavaScript
	Prism.languages.typescript.keyword.push(
		/\b(?:abstract|declare|is|keyof|readonly|require)\b/,
		// keywords that have to be followed by an identifier
		/\b(?:asserts|infer|interface|module|namespace|type)\b(?=\s*(?:[{_$a-zA-Z\xA0-\uFFFF]|$))/,
		// This is for `import type *, {}`
		/\btype\b(?=\s*(?:[\{*]|$))/
	);

	// doesn't work with TS because TS is too complex
	delete Prism.languages.typescript['parameter'];
	delete Prism.languages.typescript['literal-property'];

	// a version of typescript specifically for highlighting types
	var typeInside = Prism.languages.extend('typescript', {});
	delete typeInside['class-name'];

	Prism.languages.typescript['class-name'].inside = typeInside;

	Prism.languages.insertBefore('typescript', 'function', {
		'decorator': {
			pattern: /@[$\w\xA0-\uFFFF]+/,
			inside: {
				'at': {
					pattern: /^@/,
					alias: 'operator'
				},
				'function': /^[\s\S]+/
			}
		},
		'generic-function': {
			// e.g. foo<T extends "bar" | "baz">( ...
			pattern: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\s*\()/,
			greedy: true,
			inside: {
				'function': /^#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*/,
				'generic': {
					pattern: /<[\s\S]+/, // everything after the first <
					alias: 'class-name',
					inside: typeInside
				}
			}
		}
	});

	Prism.languages.ts = Prism.languages.typescript;

}(Prism));

const ParamViewer_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/paramviewer/ParamViewer.svelte generated by Svelte v4.2.2 */
const {
	HtmlTag,
	SvelteComponent: SvelteComponent$1,
	append,
	attr,
	binding_callbacks,
	destroy_block,
	detach,
	element,
	empty,
	ensure_array_like,
	init: init$1,
	insert,
	listen,
	noop,
	safe_not_equal: safe_not_equal$1,
	set_data,
	set_style,
	space,
	text,
	toggle_class,
	update_keyed_each
} = window.__gradio__svelte__internal;
function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i].type;
	child_ctx[11] = list[i].description;
	child_ctx[12] = list[i].default;
	child_ctx[13] = list[i].name;
	child_ctx[14] = list;
	child_ctx[15] = i;
	return child_ctx;
}

// (37:1) {#if _docs}
function create_if_block(ctx) {
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let each_value = ensure_array_like(/*_docs*/ ctx[1]);
	const get_key = ctx => /*name*/ ctx[13];

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(target, anchor);
				}
			}

			insert(target, each_1_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*show_desc, _docs, lang, el*/ 15) {
				each_value = ensure_array_like(/*_docs*/ ctx[1]);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, destroy_block, create_each_block, each_1_anchor, get_each_context);
			}
		},
		d(detaching) {
			if (detaching) {
				detach(each_1_anchor);
			}

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}
		}
	};
}

// (42:14) {#if type}
function create_if_block_4(ctx) {
	let t;
	let html_tag;
	let raw_value = /*type*/ ctx[10] + "";
	let html_anchor;

	return {
		c() {
			t = text(": ");
			html_tag = new HtmlTag(false);
			html_anchor = empty();
			html_tag.a = html_anchor;
		},
		m(target, anchor) {
			insert(target, t, anchor);
			html_tag.m(raw_value, target, anchor);
			insert(target, html_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*_docs*/ 2 && raw_value !== (raw_value = /*type*/ ctx[10] + "")) html_tag.p(raw_value);
		},
		d(detaching) {
			if (detaching) {
				detach(t);
				detach(html_anchor);
				html_tag.d();
			}
		}
	};
}

// (51:4) {#if show_desc[i]}
function create_if_block_1(ctx) {
	let t;
	let if_block1_anchor;
	let if_block0 = /*_default*/ ctx[12] && create_if_block_3(ctx);
	let if_block1 = /*description*/ ctx[11] && create_if_block_2(ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, if_block1_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*_default*/ ctx[12]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_3(ctx);
					if_block0.c();
					if_block0.m(t.parentNode, t);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*description*/ ctx[11]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_2(ctx);
					if_block1.c();
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		d(detaching) {
			if (detaching) {
				detach(t);
				detach(if_block1_anchor);
			}

			if (if_block0) if_block0.d(detaching);
			if (if_block1) if_block1.d(detaching);
		}
	};
}

// (52:5) {#if _default}
function create_if_block_3(ctx) {
	let div;
	let span;
	let t1;
	let code;
	let t2;
	let html_tag;
	let raw_value = /*_default*/ ctx[12] + "";

	return {
		c() {
			div = element("div");
			span = element("span");
			span.textContent = "default";
			t1 = space();
			code = element("code");
			t2 = text("= ");
			html_tag = new HtmlTag(false);
			attr(span, "class", "svelte-1n1otz8");
			set_style(span, "padding-right", "4px");
			html_tag.a = null;
			attr(code, "class", "svelte-1n1otz8");
			attr(div, "class", "default svelte-1n1otz8");
			toggle_class(div, "last", !/*description*/ ctx[11]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, span);
			append(div, t1);
			append(div, code);
			append(code, t2);
			html_tag.m(raw_value, code);
		},
		p(ctx, dirty) {
			if (dirty & /*_docs*/ 2 && raw_value !== (raw_value = /*_default*/ ctx[12] + "")) html_tag.p(raw_value);

			if (dirty & /*_docs*/ 2) {
				toggle_class(div, "last", !/*description*/ ctx[11]);
			}
		},
		d(detaching) {
			if (detaching) {
				detach(div);
			}
		}
	};
}

// (58:5) {#if description}
function create_if_block_2(ctx) {
	let div;
	let p;
	let t_value = /*description*/ ctx[11] + "";
	let t;

	return {
		c() {
			div = element("div");
			p = element("p");
			t = text(t_value);
			attr(div, "class", "description svelte-1n1otz8");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, p);
			append(p, t);
		},
		p(ctx, dirty) {
			if (dirty & /*_docs*/ 2 && t_value !== (t_value = /*description*/ ctx[11] + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) {
				detach(div);
			}
		}
	};
}

// (38:2) {#each _docs as { type, description, default: _default, name }
function create_each_block(key_1, ctx) {
	let div1;
	let div0;
	let pre;
	let code;
	let t0_value = /*name*/ ctx[13] + "";
	let t0;
	let i = /*i*/ ctx[15];
	let pre_class_value;
	let t1;
	let button;
	let t3;
	let t4;
	let mounted;
	let dispose;
	let if_block0 = /*type*/ ctx[10] && create_if_block_4(ctx);
	const assign_code = () => /*code_binding*/ ctx[6](code, i);
	const unassign_code = () => /*code_binding*/ ctx[6](null, i);

	function click_handler() {
		return /*click_handler*/ ctx[7](/*i*/ ctx[15]);
	}

	let if_block1 = /*show_desc*/ ctx[3][/*i*/ ctx[15]] && create_if_block_1(ctx);

	return {
		key: key_1,
		first: null,
		c() {
			div1 = element("div");
			div0 = element("div");
			pre = element("pre");
			code = element("code");
			t0 = text(t0_value);
			if (if_block0) if_block0.c();
			t1 = space();
			button = element("button");
			button.textContent = "â–²";
			t3 = space();
			if (if_block1) if_block1.c();
			t4 = space();
			attr(code, "class", "svelte-1n1otz8");
			attr(pre, "class", pre_class_value = "language-" + /*lang*/ ctx[0] + " svelte-1n1otz8");
			attr(button, "class", "arrow svelte-1n1otz8");
			toggle_class(button, "disabled", !/*description*/ ctx[11] && !/*_default*/ ctx[12]);
			toggle_class(button, "hidden", !/*show_desc*/ ctx[3][/*i*/ ctx[15]]);
			attr(div0, "class", "type svelte-1n1otz8");
			attr(div1, "class", "param md svelte-1n1otz8");
			toggle_class(div1, "open", /*show_desc*/ ctx[3][/*i*/ ctx[15]]);
			this.first = div1;
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, pre);
			append(pre, code);
			append(code, t0);
			if (if_block0) if_block0.m(code, null);
			assign_code();
			append(div0, t1);
			append(div0, button);
			append(div1, t3);
			if (if_block1) if_block1.m(div1, null);
			append(div1, t4);

			if (!mounted) {
				dispose = listen(button, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*_docs*/ 2 && t0_value !== (t0_value = /*name*/ ctx[13] + "")) set_data(t0, t0_value);

			if (/*type*/ ctx[10]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_4(ctx);
					if_block0.c();
					if_block0.m(code, null);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (i !== /*i*/ ctx[15]) {
				unassign_code();
				i = /*i*/ ctx[15];
				assign_code();
			}

			if (dirty & /*lang*/ 1 && pre_class_value !== (pre_class_value = "language-" + /*lang*/ ctx[0] + " svelte-1n1otz8")) {
				attr(pre, "class", pre_class_value);
			}

			if (dirty & /*_docs*/ 2) {
				toggle_class(button, "disabled", !/*description*/ ctx[11] && !/*_default*/ ctx[12]);
			}

			if (dirty & /*show_desc, _docs*/ 10) {
				toggle_class(button, "hidden", !/*show_desc*/ ctx[3][/*i*/ ctx[15]]);
			}

			if (/*show_desc*/ ctx[3][/*i*/ ctx[15]]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_1(ctx);
					if_block1.c();
					if_block1.m(div1, t4);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty & /*show_desc, _docs*/ 10) {
				toggle_class(div1, "open", /*show_desc*/ ctx[3][/*i*/ ctx[15]]);
			}
		},
		d(detaching) {
			if (detaching) {
				detach(div1);
			}

			if (if_block0) if_block0.d();
			unassign_code();
			if (if_block1) if_block1.d();
			mounted = false;
			dispose();
		}
	};
}

function create_fragment$1(ctx) {
	let div;
	let if_block = /*_docs*/ ctx[1] && create_if_block(ctx);

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			attr(div, "class", "wrap svelte-1n1otz8");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block) if_block.m(div, null);
		},
		p(ctx, [dirty]) {
			if (/*_docs*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(div, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) {
				detach(div);
			}

			if (if_block) if_block.d();
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	let show_desc;
	let { docs } = $$props;
	let { lang = "python" } = $$props;
	let { linkify = [] } = $$props;
	let _docs;

	function highlight(code, lang) {
		let highlighted = Prism$1.highlight(code, Prism$1.languages[lang], lang);

		for (const link of linkify) {
			highlighted = highlighted.replace(new RegExp(link, "g"), `<a href="#h-${link.toLocaleLowerCase()}">${link}</a>`);
		}

		return highlighted;
	}

	function highlight_code(_docs, lang) {
		return Object.entries(_docs).map(([name, { type, description, default: _default }]) => {
			let highlighted_type = type ? highlight(type, lang) : null;

			return {
				name,
				type: highlighted_type,
				description,
				default: _default ? highlight(_default, lang) : null
			};
		});
	}

	let el = [];

	function code_binding($$value, i) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			el[i] = $$value;
			$$invalidate(2, el);
		});
	}

	const click_handler = i => $$invalidate(3, show_desc[i] = !show_desc[i], show_desc);

	$$self.$$set = $$props => {
		if ('docs' in $$props) $$invalidate(4, docs = $$props.docs);
		if ('lang' in $$props) $$invalidate(0, lang = $$props.lang);
		if ('linkify' in $$props) $$invalidate(5, linkify = $$props.linkify);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*docs, lang*/ 17) {
			{
				setTimeout(
					() => {
						$$invalidate(1, _docs = highlight_code(docs, lang));
					},
					0
				);
			}
		}

		if ($$self.$$.dirty & /*_docs*/ 2) {
			$$invalidate(3, show_desc = _docs && _docs.map(x => false));
		}
	};

	return [lang, _docs, el, show_desc, docs, linkify, code_binding, click_handler];
}

class ParamViewer extends SvelteComponent$1 {
	constructor(options) {
		super();
		init$1(this, options, instance$1, create_fragment$1, safe_not_equal$1, { docs: 4, lang: 0, linkify: 5 });
	}
}

/* home/runner/work/gradio/gradio/js/paramviewer/Index.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent,
	create_component,
	destroy_component,
	init,
	mount_component,
	safe_not_equal,
	transition_in,
	transition_out
} = window.__gradio__svelte__internal;
function create_fragment(ctx) {
	let paramviewer;
	let current;

	paramviewer = new ParamViewer({
			props: {
				docs: /*value*/ ctx[0],
				linkify: /*linkify*/ ctx[1]
			}
		});

	return {
		c() {
			create_component(paramviewer.$$.fragment);
		},
		m(target, anchor) {
			mount_component(paramviewer, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const paramviewer_changes = {};
			if (dirty & /*value*/ 1) paramviewer_changes.docs = /*value*/ ctx[0];
			if (dirty & /*linkify*/ 2) paramviewer_changes.linkify = /*linkify*/ ctx[1];
			paramviewer.$set(paramviewer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(paramviewer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(paramviewer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(paramviewer, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { value } = $$props;
	let { linkify = [] } = $$props;

	$$self.$$set = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('linkify' in $$props) $$invalidate(1, linkify = $$props.linkify);
	};

	return [value, linkify];
}

class Index extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { value: 0, linkify: 1 });
	}
}

export { Index as default };
//# sourceMappingURL=Index-5f7963eb.js.map
